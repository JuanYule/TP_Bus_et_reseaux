
TP_Bus_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005354  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005688  08005688  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005690  08005690  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000074  0800570c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  0800570c  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126b8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fe  00000000  00000000  0003275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00034a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00035b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ee4  00000000  00000000  00036b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ef4  00000000  00000000  00039a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d716c  00000000  00000000  0004d958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124ac4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000510c  00000000  00000000  00124b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800550c 	.word	0x0800550c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800550c 	.word	0x0800550c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <configBMP280>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void configBMP280(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af02      	add	r7, sp, #8
	uint8_t pData[2];
	pData[0] = 0xF4; // @ du ctrl_meas
 80005ba:	23f4      	movs	r3, #244	; 0xf4
 80005bc:	713b      	strb	r3, [r7, #4]
	pData[1] = 0x57; //config mode normal, oversampling pressure x16 et temp x2
 80005be:	2357      	movs	r3, #87	; 0x57
 80005c0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, addr_BMP280, pData, 2, HAL_MAX_DELAY);
 80005c2:	21ee      	movs	r1, #238	; 0xee
 80005c4:	1d3a      	adds	r2, r7, #4
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2302      	movs	r3, #2
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <configBMP280+0x48>)
 80005d0:	f001 fcc6 	bl	8001f60 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, addr_BMP280, &data[0], 6, HAL_MAX_DELAY);
 80005d4:	21ee      	movs	r1, #238	; 0xee
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2306      	movs	r3, #6
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <configBMP280+0x4c>)
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <configBMP280+0x48>)
 80005e2:	f001 fdbb 	bl	800215c <HAL_I2C_Master_Receive>
	printf("la configuration est faite et la nouvelle valeur du registre est : %x\r\n", data[0]);
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <configBMP280+0x4c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <configBMP280+0x50>)
 80005ee:	f003 ff89 	bl	8004504 <iprintf>

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200000b8 	.word	0x200000b8
 8000600:	200001dc 	.word	0x200001dc
 8000604:	08005524 	.word	0x08005524

08000608 <etalonnageBMP280>:
	else{
		printf("Le composant n'est pas reconnu");
	}
}

void etalonnageBMP280(){
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af02      	add	r7, sp, #8
	// Lecture des «trimming parameters»
	uint8_t calibration[26]; //tableau des variables
	uint8_t REG_trimming_parameter = 0x88; //premier address
 800060e:	2388      	movs	r3, #136	; 0x88
 8000610:	70fb      	strb	r3, [r7, #3]
	//int i = 0;  //variable d'itération
	//	for (i = 0; i < sizeof(REG_trimming_parameter); ++i) {
	//		REG_trimming_parameter[i] = 0x88 + i;
	//		printf("register: %x \r\n",REG_trimming_parameter[i]);
	//	}
	HAL_I2C_Master_Transmit(&hi2c1, addr_BMP280, &REG_trimming_parameter, 1, HAL_MAX_DELAY);
 8000612:	21ee      	movs	r1, #238	; 0xee
 8000614:	1cfa      	adds	r2, r7, #3
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	483f      	ldr	r0, [pc, #252]	; (800071c <etalonnageBMP280+0x114>)
 8000620:	f001 fc9e 	bl	8001f60 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, addr_BMP280, calibration, 26, HAL_MAX_DELAY);
 8000624:	21ee      	movs	r1, #238	; 0xee
 8000626:	1d3a      	adds	r2, r7, #4
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	231a      	movs	r3, #26
 8000630:	483a      	ldr	r0, [pc, #232]	; (800071c <etalonnageBMP280+0x114>)
 8000632:	f001 fd93 	bl	800215c <HAL_I2C_Master_Receive>

	//	for ( i = 0; i < 25; ++i) {
	//		printf("Valeur premiere addr: %x\r\n",calibration[i]);
	//	}
	dig_T1 = (uint16_t)calibration[1] << 8 | calibration[0];
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	b21a      	sxth	r2, r3
 800063c:	793b      	ldrb	r3, [r7, #4]
 800063e:	b21b      	sxth	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b21b      	sxth	r3, r3
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b36      	ldr	r3, [pc, #216]	; (8000720 <etalonnageBMP280+0x118>)
 8000648:	801a      	strh	r2, [r3, #0]
	dig_T2 = (int16_t)calibration[3] << 8 | calibration[2];
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	b21a      	sxth	r2, r3
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	b21b      	sxth	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	b21a      	sxth	r2, r3
 8000658:	4b32      	ldr	r3, [pc, #200]	; (8000724 <etalonnageBMP280+0x11c>)
 800065a:	801a      	strh	r2, [r3, #0]
	dig_T3 = (int16_t)calibration[5] << 8 | calibration[4];
 800065c:	7a7b      	ldrb	r3, [r7, #9]
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	b21a      	sxth	r2, r3
 8000662:	7a3b      	ldrb	r3, [r7, #8]
 8000664:	b21b      	sxth	r3, r3
 8000666:	4313      	orrs	r3, r2
 8000668:	b21a      	sxth	r2, r3
 800066a:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <etalonnageBMP280+0x120>)
 800066c:	801a      	strh	r2, [r3, #0]
	dig_P1 = (uint16_t)calibration[7] << 8 | calibration[6];
 800066e:	7afb      	ldrb	r3, [r7, #11]
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	b21a      	sxth	r2, r3
 8000674:	7abb      	ldrb	r3, [r7, #10]
 8000676:	b21b      	sxth	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b21b      	sxth	r3, r3
 800067c:	b29a      	uxth	r2, r3
 800067e:	4b2b      	ldr	r3, [pc, #172]	; (800072c <etalonnageBMP280+0x124>)
 8000680:	801a      	strh	r2, [r3, #0]
	dig_P2 = (int16_t)calibration[9] << 8 | calibration[8];
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b21a      	sxth	r2, r3
 8000688:	7b3b      	ldrb	r3, [r7, #12]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21a      	sxth	r2, r3
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <etalonnageBMP280+0x128>)
 8000692:	801a      	strh	r2, [r3, #0]
	dig_P3 = (int16_t)calibration[11] << 8 | calibration[10];
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	b21a      	sxth	r2, r3
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	b21b      	sxth	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <etalonnageBMP280+0x12c>)
 80006a4:	801a      	strh	r2, [r3, #0]
	dig_P4 = (int16_t)calibration[13] << 8 | calibration[12];
 80006a6:	7c7b      	ldrb	r3, [r7, #17]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	7c3b      	ldrb	r3, [r7, #16]
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <etalonnageBMP280+0x130>)
 80006b6:	801a      	strh	r2, [r3, #0]
	dig_P5 = (int16_t)calibration[15] << 8 | calibration[14];
 80006b8:	7cfb      	ldrb	r3, [r7, #19]
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	b21a      	sxth	r2, r3
 80006be:	7cbb      	ldrb	r3, [r7, #18]
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <etalonnageBMP280+0x134>)
 80006c8:	801a      	strh	r2, [r3, #0]
	dig_P6 = (int16_t)calibration[17] << 8 | calibration[16];
 80006ca:	7d7b      	ldrb	r3, [r7, #21]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	7d3b      	ldrb	r3, [r7, #20]
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <etalonnageBMP280+0x138>)
 80006da:	801a      	strh	r2, [r3, #0]
	dig_P7 = (int16_t)calibration[19] << 8 | calibration[18];
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	7dbb      	ldrb	r3, [r7, #22]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <etalonnageBMP280+0x13c>)
 80006ec:	801a      	strh	r2, [r3, #0]
	dig_P8 = (int16_t)calibration[21] << 8 | calibration[20];
 80006ee:	7e7b      	ldrb	r3, [r7, #25]
 80006f0:	021b      	lsls	r3, r3, #8
 80006f2:	b21a      	sxth	r2, r3
 80006f4:	7e3b      	ldrb	r3, [r7, #24]
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <etalonnageBMP280+0x140>)
 80006fe:	801a      	strh	r2, [r3, #0]
	dig_P9 = (int16_t)calibration[23] << 8 | calibration[22];
 8000700:	7efb      	ldrb	r3, [r7, #27]
 8000702:	021b      	lsls	r3, r3, #8
 8000704:	b21a      	sxth	r2, r3
 8000706:	7ebb      	ldrb	r3, [r7, #26]
 8000708:	b21b      	sxth	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b21a      	sxth	r2, r3
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <etalonnageBMP280+0x144>)
 8000710:	801a      	strh	r2, [r3, #0]
	//dig_T1 = (uint16_t)calibration[1] << 8 | calibration[0];
}
 8000712:	bf00      	nop
 8000714:	3720      	adds	r7, #32
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000b8 	.word	0x200000b8
 8000720:	20000204 	.word	0x20000204
 8000724:	20000206 	.word	0x20000206
 8000728:	20000208 	.word	0x20000208
 800072c:	2000020a 	.word	0x2000020a
 8000730:	2000020c 	.word	0x2000020c
 8000734:	2000020e 	.word	0x2000020e
 8000738:	20000210 	.word	0x20000210
 800073c:	20000212 	.word	0x20000212
 8000740:	20000214 	.word	0x20000214
 8000744:	20000216 	.word	0x20000216
 8000748:	20000218 	.word	0x20000218
 800074c:	2000021a 	.word	0x2000021a

08000750 <bmp280_compensate_T_int32>:
//==============Compensation formula in 32 bit fixed point
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123�? equals 51.23 DegC.
// t_fine carries fine temperature as global value
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 8000750:	b480      	push	{r7}
 8000752:	b087      	sub	sp, #28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	10da      	asrs	r2, r3, #3
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <bmp280_compensate_T_int32+0x74>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <bmp280_compensate_T_int32+0x78>)
 8000766:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076a:	fb02 f303 	mul.w	r3, r2, r3
 800076e:	12db      	asrs	r3, r3, #11
 8000770:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	111b      	asrs	r3, r3, #4
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <bmp280_compensate_T_int32+0x74>)
 8000778:	8812      	ldrh	r2, [r2, #0]
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	1112      	asrs	r2, r2, #4
 8000780:	4910      	ldr	r1, [pc, #64]	; (80007c4 <bmp280_compensate_T_int32+0x74>)
 8000782:	8809      	ldrh	r1, [r1, #0]
 8000784:	1a52      	subs	r2, r2, r1
 8000786:	fb02 f303 	mul.w	r3, r2, r3
 800078a:	131b      	asrs	r3, r3, #12
			((BMP280_S32_t)dig_T3)) >> 14;
 800078c:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <bmp280_compensate_T_int32+0x7c>)
 800078e:	f9b2 2000 	ldrsh.w	r2, [r2]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 8000792:	fb02 f303 	mul.w	r3, r2, r3
 8000796:	139b      	asrs	r3, r3, #14
 8000798:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	4413      	add	r3, r2
 80007a0:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <bmp280_compensate_T_int32+0x80>)
 80007a2:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <bmp280_compensate_T_int32+0x80>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	3380      	adds	r3, #128	; 0x80
 80007b0:	121b      	asrs	r3, r3, #8
 80007b2:	60fb      	str	r3, [r7, #12]
	return T;
 80007b4:	68fb      	ldr	r3, [r7, #12]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	371c      	adds	r7, #28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000204 	.word	0x20000204
 80007c8:	20000206 	.word	0x20000206
 80007cc:	20000208 	.word	0x20000208
 80007d0:	2000021c 	.word	0x2000021c

080007d4 <read_temp>:
	p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));
	return p;
}

void read_temp()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af02      	add	r7, sp, #8
	uint8_t addr_temp_press = 0xF7;
 80007da:	23f7      	movs	r3, #247	; 0xf7
 80007dc:	71fb      	strb	r3, [r7, #7]
	uint32_t pressure;

	BMP280_S32_t temp_compensation;
	BMP280_U32_t press_compensation;

	HAL_I2C_Master_Transmit(&hi2c1, addr_BMP280, &addr_temp_press, 1, HAL_MAX_DELAY);
 80007de:	21ee      	movs	r1, #238	; 0xee
 80007e0:	1dfa      	adds	r2, r7, #7
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2301      	movs	r3, #1
 80007ea:	481a      	ldr	r0, [pc, #104]	; (8000854 <read_temp+0x80>)
 80007ec:	f001 fbb8 	bl	8001f60 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, addr_BMP280, data_temp_press, 6, HAL_MAX_DELAY);
 80007f0:	21ee      	movs	r1, #238	; 0xee
 80007f2:	463a      	mov	r2, r7
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2306      	movs	r3, #6
 80007fc:	4815      	ldr	r0, [pc, #84]	; (8000854 <read_temp+0x80>)
 80007fe:	f001 fcad 	bl	800215c <HAL_I2C_Master_Receive>
	//		printf("data = 0x%x \r\n", data_temp_press[i]);
	//	}

	//On stocke des valeur dans le registre «data_temp_press»
//	pressure = (data_temp_press[0]<<12)|(data_temp_press[1]<<4)|(data_temp_press[2]>>4);
	temperature = (data_temp_press[3]<<12)|(data_temp_press[4]<<4)|(data_temp_press[5]>>4);
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	031a      	lsls	r2, r3, #12
 8000806:	793b      	ldrb	r3, [r7, #4]
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	4313      	orrs	r3, r2
 800080c:	797a      	ldrb	r2, [r7, #5]
 800080e:	0912      	lsrs	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	4313      	orrs	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]

//	printf("Valeur de la pression = 0x%lx, deci = %d \n\r",pressure, pressure);
//	printf("Valeur de la temperature = 0x%lx, deci = %d \n\r",temperature, temperature);

//	press_compensation=bmp280_compensate_P_int32(pressure);
	temp_compensation = bmp280_compensate_T_int32(temperature);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff99 	bl	8000750 <bmp280_compensate_T_int32>
 800081e:	60b8      	str	r0, [r7, #8]
	printf("T=+%2d.%2d_C \r\n",(int)(temp_compensation/100),temp_compensation%100);
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <read_temp+0x84>)
 8000824:	fb82 1203 	smull	r1, r2, r2, r3
 8000828:	1152      	asrs	r2, r2, #5
 800082a:	17db      	asrs	r3, r3, #31
 800082c:	1ad0      	subs	r0, r2, r3
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	4a09      	ldr	r2, [pc, #36]	; (8000858 <read_temp+0x84>)
 8000832:	fb82 1203 	smull	r1, r2, r2, r3
 8000836:	1151      	asrs	r1, r2, #5
 8000838:	17da      	asrs	r2, r3, #31
 800083a:	1a8a      	subs	r2, r1, r2
 800083c:	2164      	movs	r1, #100	; 0x64
 800083e:	fb01 f202 	mul.w	r2, r1, r2
 8000842:	1a9a      	subs	r2, r3, r2
 8000844:	4601      	mov	r1, r0
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <read_temp+0x88>)
 8000848:	f003 fe5c 	bl	8004504 <iprintf>
//	printf("Pressure value compensated = %d.%d hPa\n\r",(int)(press_compensation/100),(press_compensation%100));
//	printf("Temperature value compensated = %d.%d_C\n\r",(int)(temp_compensation/100),temp_compensation%100);;
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200000b8 	.word	0x200000b8
 8000858:	51eb851f 	.word	0x51eb851f
 800085c:	080055bc 	.word	0x080055bc

08000860 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000868:	2120      	movs	r1, #32
 800086a:	4810      	ldr	r0, [pc, #64]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800086c:	f001 fa19 	bl	8001ca2 <HAL_GPIO_TogglePin>
	aData[0]=0x5A;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000872:	225a      	movs	r2, #90	; 0x5a
 8000874:	701a      	strb	r2, [r3, #0]
	if(incr==1){
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d106      	bne.n	800088c <HAL_TIM_PeriodElapsedCallback+0x2c>
		aData[1]=0x01;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000880:	2201      	movs	r2, #1
 8000882:	705a      	strb	r2, [r3, #1]
		incr =0;
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	e002      	b.n	8000892 <HAL_TIM_PeriodElapsedCallback+0x32>
	}
	else{
		aData[1]=0x00;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	705a      	strb	r2, [r3, #1]
	}
	HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000896:	4909      	ldr	r1, [pc, #36]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800089a:	f000 fe68 	bl	800156e <HAL_CAN_AddTxMessage>
	incr = 1;
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020000 	.word	0x40020000
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000200 	.word	0x20000200
 80008b8:	200001fc 	.word	0x200001fc
 80008bc:	200001e4 	.word	0x200001e4
 80008c0:	20000090 	.word	0x20000090

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f000 fca0 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f834 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 f97a 	bl	8000bc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d4:	f000 f924 	bl	8000b20 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80008d8:	f000 f89a 	bl	8000a10 <MX_CAN1_Init>
  MX_I2C1_Init();
 80008dc:	f000 f8ce 	bl	8000a7c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80008e0:	f000 f948 	bl	8000b74 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 80008e4:	f000 f8f8 	bl	8000ad8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	//Configuration du capteur BMP280
	configBMP280();
 80008e8:	f7ff fe64 	bl	80005b4 <configBMP280>

	//Calibration || etalonnage
	printf("Etalonnage\r\n");
 80008ec:	480e      	ldr	r0, [pc, #56]	; (8000928 <main+0x64>)
 80008ee:	f003 fe8f 	bl	8004610 <puts>
	etalonnageBMP280();
 80008f2:	f7ff fe89 	bl	8000608 <etalonnageBMP280>

	read_temp();
 80008f6:	f7ff ff6d 	bl	80007d4 <read_temp>

	pHeader.StdId = 0x61;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <main+0x68>)
 80008fc:	2261      	movs	r2, #97	; 0x61
 80008fe:	601a      	str	r2, [r3, #0]
	//pHeader.ExtId =0x000;
	pHeader.IDE = CAN_ID_STD;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <main+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <main+0x68>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
	pHeader.DLC = 2;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <main+0x68>)
 800090e:	2202      	movs	r2, #2
 8000910:	611a      	str	r2, [r3, #16]
	pHeader.TransmitGlobalTime = DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <main+0x68>)
 8000914:	2200      	movs	r2, #0
 8000916:	751a      	strb	r2, [r3, #20]

	HAL_TIM_Base_Start_IT(&htim13);
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <main+0x6c>)
 800091a:	f002 ffab 	bl	8003874 <HAL_TIM_Base_Start_IT>
	HAL_CAN_Start(&hcan1);
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <main+0x70>)
 8000920:	f000 fde1 	bl	80014e6 <HAL_CAN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000924:	e7fe      	b.n	8000924 <main+0x60>
 8000926:	bf00      	nop
 8000928:	080055cc 	.word	0x080055cc
 800092c:	200001e4 	.word	0x200001e4
 8000930:	2000010c 	.word	0x2000010c
 8000934:	20000090 	.word	0x20000090

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2234      	movs	r2, #52	; 0x34
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fdd4 	bl	80044f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <SystemClock_Config+0xd0>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a28      	ldr	r2, [pc, #160]	; (8000a08 <SystemClock_Config+0xd0>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <SystemClock_Config+0xd0>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000978:	2300      	movs	r3, #0
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <SystemClock_Config+0xd4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <SystemClock_Config+0xd4>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <SystemClock_Config+0xd4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a0:	2310      	movs	r3, #16
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a4:	2302      	movs	r3, #2
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009ac:	2308      	movs	r3, #8
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009b0:	2350      	movs	r3, #80	; 0x50
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 fc67 	bl	8003298 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009d0:	f000 f968 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	230f      	movs	r3, #15
 80009d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d8:	2302      	movs	r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	2102      	movs	r1, #2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 f907 	bl	8002c04 <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80009fc:	f000 f952 	bl	8000ca4 <Error_Handler>
  }
}
 8000a00:	bf00      	nop
 8000a02:	3750      	adds	r7, #80	; 0x50
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40007000 	.word	0x40007000

08000a10 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <MX_CAN1_Init+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a32:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a3a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_CAN1_Init+0x64>)
 8000a62:	f000 fc45 	bl	80012f0 <HAL_CAN_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a6c:	f000 f91a 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000090 	.word	0x20000090
 8000a78:	40006400 	.word	0x40006400

08000a7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <MX_I2C1_Init+0x54>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_I2C1_Init+0x58>)
 8000a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aba:	f001 f90d 	bl	8001cd8 <HAL_I2C_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac4:	f000 f8ee 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200000b8 	.word	0x200000b8
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	000186a0 	.word	0x000186a0

08000ad8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_TIM13_Init+0x40>)
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <MX_TIM13_Init+0x44>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 9999;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <MX_TIM13_Init+0x40>)
 8000ae4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ae8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_TIM13_Init+0x40>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 8000-1;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_TIM13_Init+0x40>)
 8000af2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000af6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <MX_TIM13_Init+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_TIM13_Init+0x40>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_TIM13_Init+0x40>)
 8000b06:	f002 fe65 	bl	80037d4 <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000b10:	f000 f8c8 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000010c 	.word	0x2000010c
 8000b1c:	40001c00 	.word	0x40001c00

08000b20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_USART2_UART_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b58:	f003 f8e0 	bl	8003d1c <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b62:	f000 f89f 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000154 	.word	0x20000154
 8000b70:	40004400 	.word	0x40004400

08000b74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <MX_USART3_UART_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_USART3_UART_Init+0x4c>)
 8000bac:	f003 f8b6 	bl	8003d1c <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f000 f875 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000198 	.word	0x20000198
 8000bc4:	40004800 	.word	0x40004800

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a2c      	ldr	r2, [pc, #176]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_GPIO_Init+0xd0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2120      	movs	r1, #32
 8000c52:	4812      	ldr	r0, [pc, #72]	; (8000c9c <MX_GPIO_Init+0xd4>)
 8000c54:	f001 f80c 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <MX_GPIO_Init+0xd8>)
 8000c70:	f000 fe6a 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c74:	2320      	movs	r3, #32
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_GPIO_Init+0xd4>)
 8000c8c:	f000 fe5c 	bl	8001948 <HAL_GPIO_Init>

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020800 	.word	0x40020800

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cee:	2007      	movs	r0, #7
 8000cf0:	f000 fde8 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <HAL_CAN_MspInit+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12c      	bne.n	8000d7c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_CAN_MspInit+0x88>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <HAL_CAN_MspInit+0x88>)
 8000d2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_CAN_MspInit+0x88>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_CAN_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_CAN_MspInit+0x88>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_CAN_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d6c:	2309      	movs	r3, #9
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_CAN_MspInit+0x8c>)
 8000d78:	f000 fde6 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40006400 	.word	0x40006400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020400 	.word	0x40020400

08000d90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_I2C_MspInit+0x84>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12b      	bne.n	8000e0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dce:	23c0      	movs	r3, #192	; 0xc0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd2:	2312      	movs	r3, #18
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dde:	2304      	movs	r3, #4
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <HAL_I2C_MspInit+0x8c>)
 8000dea:	f000 fdad 	bl	8001948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020400 	.word	0x40020400

08000e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_TIM_Base_MspInit+0x48>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d115      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <HAL_TIM_Base_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <HAL_TIM_Base_MspInit+0x4c>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_TIM_Base_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	202c      	movs	r0, #44	; 0x2c
 8000e54:	f000 fd41 	bl	80018da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000e58:	202c      	movs	r0, #44	; 0x2c
 8000e5a:	f000 fd5a 	bl	8001912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40001c00 	.word	0x40001c00
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a41      	ldr	r2, [pc, #260]	; (8000f94 <HAL_UART_MspInit+0x124>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12c      	bne.n	8000eec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a3f      	ldr	r2, [pc, #252]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a38      	ldr	r2, [pc, #224]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	482d      	ldr	r0, [pc, #180]	; (8000f9c <HAL_UART_MspInit+0x12c>)
 8000ee6:	f000 fd2f 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eea:	e04f      	b.n	8000f8c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a2b      	ldr	r2, [pc, #172]	; (8000fa0 <HAL_UART_MspInit+0x130>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d14a      	bne.n	8000f8c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a18      	ldr	r2, [pc, #96]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_UART_MspInit+0x128>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <HAL_UART_MspInit+0x134>)
 8000f66:	f000 fcef 	bl	8001948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <HAL_UART_MspInit+0x138>)
 8000f88:	f000 fcde 	bl	8001948 <HAL_GPIO_Init>
}
 8000f8c:	bf00      	nop
 8000f8e:	3730      	adds	r7, #48	; 0x30
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40004400 	.word	0x40004400
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40004800 	.word	0x40004800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020400 	.word	0x40020400

08000fac <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000fb4:	1d39      	adds	r1, r7, #4
 8000fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <__io_putchar+0x30>)
 8000fbe:	f002 fefa 	bl	8003db6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000fc2:	1d39      	adds	r1, r7, #4
 8000fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <__io_putchar+0x34>)
 8000fcc:	f002 fef3 	bl	8003db6 <HAL_UART_Transmit>
	return ch;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000154 	.word	0x20000154
 8000fe0:	20000198 	.word	0x20000198

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f93e 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800103e:	f002 fc89 	bl	8003954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000010c 	.word	0x2000010c

0800104c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e00a      	b.n	8001074 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800105e:	f3af 8000 	nop.w
 8001062:	4601      	mov	r1, r0
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	b2ca      	uxtb	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf0      	blt.n	800105e <_read+0x12>
	}

return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	e009      	b.n	80010ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff83 	bl	8000fac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf1      	blt.n	8001098 <_write+0x12>
	}
	return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_close>:

int _close(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
	return -1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e6:	605a      	str	r2, [r3, #4]
	return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_isatty>:

int _isatty(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	return 1;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f003 f9a2 	bl	80044a0 <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20020000 	.word	0x20020000
 8001188:	00000400 	.word	0x00000400
 800118c:	20000220 	.word	0x20000220
 8001190:	20000238 	.word	0x20000238

08001194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <SystemInit+0x20>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <SystemInit+0x20>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d4:	4c0b      	ldr	r4, [pc, #44]	; (8001204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e2:	f7ff ffd7 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f003 f961 	bl	80044ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff fb6b 	bl	80008c4 <main>
  bx  lr    
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011fc:	08005698 	.word	0x08005698
  ldr r2, =_sbss
 8001200:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001204:	20000238 	.word	0x20000238

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <HAL_Init+0x40>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_Init+0x40>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x40>)
 800122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 fb45 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fd36 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fb5d 	bl	800192e <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f000 fb25 	bl	80018da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000004 	.word	0x20000004
 80012a8:	2000000c 	.word	0x2000000c
 80012ac:	20000008 	.word	0x20000008

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000000c 	.word	0x2000000c
 80012d4:	20000224 	.word	0x20000224

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000224 	.word	0x20000224

080012f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0ed      	b.n	80014de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fcf6 	bl	8000d00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001324:	f7ff ffd8 	bl	80012d8 <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800132a:	e012      	b.n	8001352 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800132c:	f7ff ffd4 	bl	80012d8 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b0a      	cmp	r3, #10
 8001338:	d90b      	bls.n	8001352 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2205      	movs	r2, #5
 800134a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e0c5      	b.n	80014de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0e5      	beq.n	800132c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0202 	bic.w	r2, r2, #2
 800136e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001370:	f7ff ffb2 	bl	80012d8 <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001376:	e012      	b.n	800139e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001378:	f7ff ffae 	bl	80012d8 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b0a      	cmp	r3, #10
 8001384:	d90b      	bls.n	800139e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2205      	movs	r2, #5
 8001396:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e09f      	b.n	80014de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e5      	bne.n	8001378 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e1b      	ldrb	r3, [r3, #24]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d108      	bne.n	80013c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e007      	b.n	80013d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7e5b      	ldrb	r3, [r3, #25]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e007      	b.n	8001400 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e9b      	ldrb	r3, [r3, #26]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d108      	bne.n	800141a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0220 	orr.w	r2, r2, #32
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e007      	b.n	800142a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0220 	bic.w	r2, r2, #32
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7edb      	ldrb	r3, [r3, #27]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d108      	bne.n	8001444 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0210 	bic.w	r2, r2, #16
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e007      	b.n	8001454 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0210 	orr.w	r2, r2, #16
 8001452:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7f1b      	ldrb	r3, [r3, #28]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d108      	bne.n	800146e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0208 	orr.w	r2, r2, #8
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e007      	b.n	800147e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0208 	bic.w	r2, r2, #8
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7f5b      	ldrb	r3, [r3, #29]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d108      	bne.n	8001498 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0204 	orr.w	r2, r2, #4
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e007      	b.n	80014a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0204 	bic.w	r2, r2, #4
 80014a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	ea42 0103 	orr.w	r1, r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d12e      	bne.n	8001558 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2202      	movs	r2, #2
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001512:	f7ff fee1 	bl	80012d8 <HAL_GetTick>
 8001516:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001518:	e012      	b.n	8001540 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800151a:	f7ff fedd 	bl	80012d8 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b0a      	cmp	r3, #10
 8001526:	d90b      	bls.n	8001540 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2205      	movs	r2, #5
 8001538:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e012      	b.n	8001566 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1e5      	bne.n	800151a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	e006      	b.n	8001566 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
  }
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800156e:	b480      	push	{r7}
 8001570:	b089      	sub	sp, #36	; 0x24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001582:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800158c:	7ffb      	ldrb	r3, [r7, #31]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d003      	beq.n	800159a <HAL_CAN_AddTxMessage+0x2c>
 8001592:	7ffb      	ldrb	r3, [r7, #31]
 8001594:	2b02      	cmp	r3, #2
 8001596:	f040 80b8 	bne.w	800170a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10a      	bne.n	80015ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d105      	bne.n	80015ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80a0 	beq.w	80016fa <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	0e1b      	lsrs	r3, r3, #24
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d907      	bls.n	80015da <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e09e      	b.n	8001718 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015da:	2201      	movs	r2, #1
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10d      	bne.n	8001608 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	6809      	ldr	r1, [r1, #0]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3318      	adds	r3, #24
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	440b      	add	r3, r1
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e00f      	b.n	8001628 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001612:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001618:	68f9      	ldr	r1, [r7, #12]
 800161a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800161c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3318      	adds	r3, #24
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	440b      	add	r3, r1
 8001626:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3318      	adds	r3, #24
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	440b      	add	r3, r1
 8001638:	3304      	adds	r3, #4
 800163a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	7d1b      	ldrb	r3, [r3, #20]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d111      	bne.n	8001668 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3318      	adds	r3, #24
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	4413      	add	r3, r2
 8001650:	3304      	adds	r3, #4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	6811      	ldr	r1, [r2, #0]
 8001658:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3318      	adds	r3, #24
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	440b      	add	r3, r1
 8001664:	3304      	adds	r3, #4
 8001666:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3307      	adds	r3, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	061a      	lsls	r2, r3, #24
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3306      	adds	r3, #6
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	041b      	lsls	r3, r3, #16
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3305      	adds	r3, #5
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	4313      	orrs	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	3204      	adds	r2, #4
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	4610      	mov	r0, r2
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	6811      	ldr	r1, [r2, #0]
 8001690:	ea43 0200 	orr.w	r2, r3, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	440b      	add	r3, r1
 800169a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800169e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3303      	adds	r3, #3
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	061a      	lsls	r2, r3, #24
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3302      	adds	r3, #2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	041b      	lsls	r3, r3, #16
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3301      	adds	r3, #1
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	4313      	orrs	r3, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	4610      	mov	r0, r2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	6811      	ldr	r1, [r2, #0]
 80016c6:	ea43 0200 	orr.w	r2, r3, r0
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	440b      	add	r3, r1
 80016d0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80016d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3318      	adds	r3, #24
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	6811      	ldr	r1, [r2, #0]
 80016e8:	f043 0201 	orr.w	r2, r3, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3318      	adds	r3, #24
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	440b      	add	r3, r1
 80016f4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e00e      	b.n	8001718 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e006      	b.n	8001718 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
  }
}
 8001718:	4618      	mov	r0, r3
 800171a:	3724      	adds	r7, #36	; 0x24
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <__NVIC_EnableIRQ+0x38>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db0a      	blt.n	80017ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	490c      	ldr	r1, [pc, #48]	; (8001810 <__NVIC_SetPriority+0x4c>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ec:	e00a      	b.n	8001804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	; (8001814 <__NVIC_SetPriority+0x50>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	3b04      	subs	r3, #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	440b      	add	r3, r1
 8001802:	761a      	strb	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f1c3 0307 	rsb	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf28      	it	cs
 8001836:	2304      	movcs	r3, #4
 8001838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3304      	adds	r3, #4
 800183e:	2b06      	cmp	r3, #6
 8001840:	d902      	bls.n	8001848 <NVIC_EncodePriority+0x30>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b03      	subs	r3, #3
 8001846:	e000      	b.n	800184a <NVIC_EncodePriority+0x32>
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	401a      	ands	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	4313      	orrs	r3, r2
         );
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001890:	d301      	bcc.n	8001896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001892:	2301      	movs	r3, #1
 8001894:	e00f      	b.n	80018b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <SysTick_Config+0x40>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189e:	210f      	movs	r1, #15
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f7ff ff8e 	bl	80017c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <SysTick_Config+0x40>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ae:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <SysTick_Config+0x40>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff29 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ec:	f7ff ff3e 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f7ff ff8e 	bl	8001818 <NVIC_EncodePriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff5d 	bl	80017c4 <__NVIC_SetPriority>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff31 	bl	8001788 <__NVIC_EnableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffa2 	bl	8001880 <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e165      	b.n	8001c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 8154 	bne.w	8001c2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d005      	beq.n	800199a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001996:	2b02      	cmp	r3, #2
 8001998:	d130      	bne.n	80019fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 0201 	and.w	r2, r3, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d017      	beq.n	8001a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d123      	bne.n	8001a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0203 	and.w	r2, r3, #3
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80ae 	beq.w	8001c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a5c      	ldr	r2, [pc, #368]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b5a      	ldr	r3, [pc, #360]	; (8001c48 <HAL_GPIO_Init+0x300>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aea:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_GPIO_Init+0x304>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4f      	ldr	r2, [pc, #316]	; (8001c50 <HAL_GPIO_Init+0x308>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d025      	beq.n	8001b62 <HAL_GPIO_Init+0x21a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4e      	ldr	r2, [pc, #312]	; (8001c54 <HAL_GPIO_Init+0x30c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d01f      	beq.n	8001b5e <HAL_GPIO_Init+0x216>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_GPIO_Init+0x310>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d019      	beq.n	8001b5a <HAL_GPIO_Init+0x212>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <HAL_GPIO_Init+0x314>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0x20e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4b      	ldr	r2, [pc, #300]	; (8001c60 <HAL_GPIO_Init+0x318>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00d      	beq.n	8001b52 <HAL_GPIO_Init+0x20a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4a      	ldr	r2, [pc, #296]	; (8001c64 <HAL_GPIO_Init+0x31c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d007      	beq.n	8001b4e <HAL_GPIO_Init+0x206>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a49      	ldr	r2, [pc, #292]	; (8001c68 <HAL_GPIO_Init+0x320>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d101      	bne.n	8001b4a <HAL_GPIO_Init+0x202>
 8001b46:	2306      	movs	r3, #6
 8001b48:	e00c      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	e00a      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b4e:	2305      	movs	r3, #5
 8001b50:	e008      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e004      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_GPIO_Init+0x21c>
 8001b62:	2300      	movs	r3, #0
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f002 0203 	and.w	r2, r2, #3
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	4093      	lsls	r3, r2
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b74:	4935      	ldr	r1, [pc, #212]	; (8001c4c <HAL_GPIO_Init+0x304>)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b82:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba6:	4a31      	ldr	r2, [pc, #196]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd0:	4a26      	ldr	r2, [pc, #152]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	f67f ae96 	bls.w	8001964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40013800 	.word	0x40013800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40021400 	.word	0x40021400
 8001c68:	40021800 	.word	0x40021800
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	041a      	lsls	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	619a      	str	r2, [r3, #24]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb4:	887a      	ldrh	r2, [r7, #2]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	041a      	lsls	r2, r3, #16
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	400b      	ands	r3, r1
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	619a      	str	r2, [r3, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e12b      	b.n	8001f42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff f846 	bl	8000d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2224      	movs	r2, #36	; 0x24
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d3c:	f001 f854 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8001d40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a81      	ldr	r2, [pc, #516]	; (8001f4c <HAL_I2C_Init+0x274>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d807      	bhi.n	8001d5c <HAL_I2C_Init+0x84>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4a80      	ldr	r2, [pc, #512]	; (8001f50 <HAL_I2C_Init+0x278>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	bf94      	ite	ls
 8001d54:	2301      	movls	r3, #1
 8001d56:	2300      	movhi	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	e006      	b.n	8001d6a <HAL_I2C_Init+0x92>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4a7d      	ldr	r2, [pc, #500]	; (8001f54 <HAL_I2C_Init+0x27c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	bf94      	ite	ls
 8001d64:	2301      	movls	r3, #1
 8001d66:	2300      	movhi	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0e7      	b.n	8001f42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4a78      	ldr	r2, [pc, #480]	; (8001f58 <HAL_I2C_Init+0x280>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0c9b      	lsrs	r3, r3, #18
 8001d7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a6a      	ldr	r2, [pc, #424]	; (8001f4c <HAL_I2C_Init+0x274>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d802      	bhi.n	8001dac <HAL_I2C_Init+0xd4>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3301      	adds	r3, #1
 8001daa:	e009      	b.n	8001dc0 <HAL_I2C_Init+0xe8>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	4a69      	ldr	r2, [pc, #420]	; (8001f5c <HAL_I2C_Init+0x284>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	495c      	ldr	r1, [pc, #368]	; (8001f4c <HAL_I2C_Init+0x274>)
 8001ddc:	428b      	cmp	r3, r1
 8001dde:	d819      	bhi.n	8001e14 <HAL_I2C_Init+0x13c>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1e59      	subs	r1, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dee:	1c59      	adds	r1, r3, #1
 8001df0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001df4:	400b      	ands	r3, r1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <HAL_I2C_Init+0x138>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1e59      	subs	r1, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0e:	e051      	b.n	8001eb4 <HAL_I2C_Init+0x1dc>
 8001e10:	2304      	movs	r3, #4
 8001e12:	e04f      	b.n	8001eb4 <HAL_I2C_Init+0x1dc>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d111      	bne.n	8001e40 <HAL_I2C_Init+0x168>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1e58      	subs	r0, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	440b      	add	r3, r1
 8001e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	e012      	b.n	8001e66 <HAL_I2C_Init+0x18e>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1e58      	subs	r0, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	0099      	lsls	r1, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Init+0x196>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e022      	b.n	8001eb4 <HAL_I2C_Init+0x1dc>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10e      	bne.n	8001e94 <HAL_I2C_Init+0x1bc>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1e58      	subs	r0, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6859      	ldr	r1, [r3, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	440b      	add	r3, r1
 8001e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e92:	e00f      	b.n	8001eb4 <HAL_I2C_Init+0x1dc>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1e58      	subs	r0, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	0099      	lsls	r1, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	6809      	ldr	r1, [r1, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6911      	ldr	r1, [r2, #16]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68d2      	ldr	r2, [r2, #12]
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	000186a0 	.word	0x000186a0
 8001f50:	001e847f 	.word	0x001e847f
 8001f54:	003d08ff 	.word	0x003d08ff
 8001f58:	431bde83 	.word	0x431bde83
 8001f5c:	10624dd3 	.word	0x10624dd3

08001f60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	817b      	strh	r3, [r7, #10]
 8001f70:	4613      	mov	r3, r2
 8001f72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff f9b0 	bl	80012d8 <HAL_GetTick>
 8001f78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	f040 80e0 	bne.w	8002148 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2319      	movs	r3, #25
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4970      	ldr	r1, [pc, #448]	; (8002154 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fc58 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e0d3      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_I2C_Master_Transmit+0x50>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e0cc      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d007      	beq.n	8001fd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2221      	movs	r2, #33	; 0x21
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	893a      	ldrh	r2, [r7, #8]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a50      	ldr	r2, [pc, #320]	; (8002158 <HAL_I2C_Master_Transmit+0x1f8>)
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002018:	8979      	ldrh	r1, [r7, #10]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	6a3a      	ldr	r2, [r7, #32]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fac2 	bl	80025a8 <I2C_MasterRequestWrite>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e08d      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002044:	e066      	b.n	8002114 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	6a39      	ldr	r1, [r7, #32]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fcd2 	bl	80029f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00d      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b04      	cmp	r3, #4
 800205c:	d107      	bne.n	800206e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e06b      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d11b      	bne.n	80020e8 <HAL_I2C_Master_Transmit+0x188>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d017      	beq.n	80020e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	6a39      	ldr	r1, [r7, #32]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fcc2 	bl	8002a76 <I2C_WaitOnBTFFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d107      	bne.n	8002110 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e01a      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d194      	bne.n	8002046 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	00100002 	.word	0x00100002
 8002158:	ffff0000 	.word	0xffff0000

0800215c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	461a      	mov	r2, r3
 8002168:	460b      	mov	r3, r1
 800216a:	817b      	strh	r3, [r7, #10]
 800216c:	4613      	mov	r3, r2
 800216e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff f8b2 	bl	80012d8 <HAL_GetTick>
 8002174:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b20      	cmp	r3, #32
 8002180:	f040 820b 	bne.w	800259a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2319      	movs	r3, #25
 800218a:	2201      	movs	r2, #1
 800218c:	497c      	ldr	r1, [pc, #496]	; (8002380 <HAL_I2C_Master_Receive+0x224>)
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fb5a 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800219a:	2302      	movs	r3, #2
 800219c:	e1fe      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_I2C_Master_Receive+0x50>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e1f7      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d007      	beq.n	80021d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2222      	movs	r2, #34	; 0x22
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2210      	movs	r2, #16
 80021ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	893a      	ldrh	r2, [r7, #8]
 8002202:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a5c      	ldr	r2, [pc, #368]	; (8002384 <HAL_I2C_Master_Receive+0x228>)
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002214:	8979      	ldrh	r1, [r7, #10]
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fa46 	bl	80026ac <I2C_MasterRequestRead>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e1b8      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	2b00      	cmp	r3, #0
 8002230:	d113      	bne.n	800225a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	623b      	str	r3, [r7, #32]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e18c      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	2b01      	cmp	r3, #1
 8002260:	d11b      	bne.n	800229a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e16c      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d11b      	bne.n	80022da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	e14c      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002300:	e138      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	2b03      	cmp	r3, #3
 8002308:	f200 80f1 	bhi.w	80024ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	2b01      	cmp	r3, #1
 8002312:	d123      	bne.n	800235c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fbed 	bl	8002af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e139      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800235a:	e10b      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	2b02      	cmp	r3, #2
 8002362:	d14e      	bne.n	8002402 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	2200      	movs	r2, #0
 800236c:	4906      	ldr	r1, [pc, #24]	; (8002388 <HAL_I2C_Master_Receive+0x22c>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fa6a 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e10e      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
 800237e:	bf00      	nop
 8002380:	00100002 	.word	0x00100002
 8002384:	ffff0000 	.word	0xffff0000
 8002388:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002400:	e0b8      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	2200      	movs	r2, #0
 800240a:	4966      	ldr	r1, [pc, #408]	; (80025a4 <HAL_I2C_Master_Receive+0x448>)
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fa1b 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0bf      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	2200      	movs	r2, #0
 8002466:	494f      	ldr	r1, [pc, #316]	; (80025a4 <HAL_I2C_Master_Receive+0x448>)
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f9ed 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e091      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ec:	e042      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fb00 	bl	8002af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e04c      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d118      	bne.n	8002574 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f aec2 	bne.w	8002302 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
  }
}
 800259c:	4618      	mov	r0, r3
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	00010004 	.word	0x00010004

080025a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	460b      	mov	r3, r1
 80025b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d006      	beq.n	80025d2 <I2C_MasterRequestWrite+0x2a>
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d003      	beq.n	80025d2 <I2C_MasterRequestWrite+0x2a>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025d0:	d108      	bne.n	80025e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e00b      	b.n	80025fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	2b12      	cmp	r3, #18
 80025ea:	d107      	bne.n	80025fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f91d 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002622:	d103      	bne.n	800262c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e035      	b.n	800269c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002638:	d108      	bne.n	800264c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800263a:	897b      	ldrh	r3, [r7, #10]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	e01b      	b.n	8002684 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800264c:	897b      	ldrh	r3, [r7, #10]
 800264e:	11db      	asrs	r3, r3, #7
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f003 0306 	and.w	r3, r3, #6
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f063 030f 	orn	r3, r3, #15
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	490e      	ldr	r1, [pc, #56]	; (80026a4 <I2C_MasterRequestWrite+0xfc>)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f943 	bl	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e010      	b.n	800269c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4907      	ldr	r1, [pc, #28]	; (80026a8 <I2C_MasterRequestWrite+0x100>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f933 	bl	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	00010008 	.word	0x00010008
 80026a8:	00010002 	.word	0x00010002

080026ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	460b      	mov	r3, r1
 80026ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d006      	beq.n	80026e6 <I2C_MasterRequestRead+0x3a>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d003      	beq.n	80026e6 <I2C_MasterRequestRead+0x3a>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e4:	d108      	bne.n	80026f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e00b      	b.n	8002710 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	2b11      	cmp	r3, #17
 80026fe:	d107      	bne.n	8002710 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f893 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002736:	d103      	bne.n	8002740 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e079      	b.n	8002838 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800274c:	d108      	bne.n	8002760 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800274e:	897b      	ldrh	r3, [r7, #10]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	b2da      	uxtb	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	e05f      	b.n	8002820 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002760:	897b      	ldrh	r3, [r7, #10]
 8002762:	11db      	asrs	r3, r3, #7
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 0306 	and.w	r3, r3, #6
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f063 030f 	orn	r3, r3, #15
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4930      	ldr	r1, [pc, #192]	; (8002840 <I2C_MasterRequestRead+0x194>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f8b9 	bl	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e054      	b.n	8002838 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4929      	ldr	r1, [pc, #164]	; (8002844 <I2C_MasterRequestRead+0x198>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f8a9 	bl	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e044      	b.n	8002838 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f831 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00d      	beq.n	8002808 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fa:	d103      	bne.n	8002804 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002802:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e017      	b.n	8002838 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002808:	897b      	ldrh	r3, [r7, #10]
 800280a:	11db      	asrs	r3, r3, #7
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f003 0306 	and.w	r3, r3, #6
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f063 030e 	orn	r3, r3, #14
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <I2C_MasterRequestRead+0x198>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f865 	bl	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	00010008 	.word	0x00010008
 8002844:	00010002 	.word	0x00010002

08002848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002858:	e025      	b.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d021      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7fe fd39 	bl	80012d8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d116      	bne.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e023      	b.n	80028ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10d      	bne.n	80028cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4013      	ands	r3, r2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	e00c      	b.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4013      	ands	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d0b6      	beq.n	800285a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002904:	e051      	b.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002914:	d123      	bne.n	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002924:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800292e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f043 0204 	orr.w	r2, r3, #4
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e046      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d021      	beq.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002966:	f7fe fcb7 	bl	80012d8 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d116      	bne.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e020      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10c      	bne.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	e00b      	b.n	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	43da      	mvns	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d18d      	bne.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a00:	e02d      	b.n	8002a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f8ce 	bl	8002ba4 <I2C_IsAcknowledgeFailed>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e02d      	b.n	8002a6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d021      	beq.n	8002a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7fe fc5d 	bl	80012d8 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d116      	bne.n	8002a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e007      	b.n	8002a6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b80      	cmp	r3, #128	; 0x80
 8002a6a:	d1ca      	bne.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a82:	e02d      	b.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f88d 	bl	8002ba4 <I2C_IsAcknowledgeFailed>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e02d      	b.n	8002af0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d021      	beq.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9c:	f7fe fc1c 	bl	80012d8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d302      	bcc.n	8002ab2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d116      	bne.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d1ca      	bne.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b04:	e042      	b.n	8002b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d119      	bne.n	8002b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0210 	mvn.w	r2, #16
 8002b1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e029      	b.n	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fe fbc6 	bl	80012d8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d116      	bne.n	8002b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e007      	b.n	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d1b5      	bne.n	8002b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bba:	d11b      	bne.n	8002bf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f043 0204 	orr.w	r2, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0cc      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d90c      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b63      	ldr	r3, [pc, #396]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c58:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	494d      	ldr	r1, [pc, #308]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d044      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d119      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e06f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e067      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4934      	ldr	r1, [pc, #208]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7fe faf0 	bl	80012d8 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fe faec 	bl	80012d8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e04f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d20c      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e032      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4916      	ldr	r1, [pc, #88]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	490e      	ldr	r1, [pc, #56]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8a:	f000 f855 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	490a      	ldr	r1, [pc, #40]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	5ccb      	ldrb	r3, [r1, r3]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe fa50 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	080055d8 	.word	0x080055d8
 8002dc8:	20000004 	.word	0x20000004
 8002dcc:	20000008 	.word	0x20000008

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dec:	f7ff fff0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0a9b      	lsrs	r3, r3, #10
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	080055e8 	.word	0x080055e8

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e14:	f7ff ffdc 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0b5b      	lsrs	r3, r3, #13
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	080055e8 	.word	0x080055e8

08002e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e3c:	b0ae      	sub	sp, #184	; 0xb8
 8002e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e5e:	4bcb      	ldr	r3, [pc, #812]	; (800318c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	f200 8206 	bhi.w	8003278 <HAL_RCC_GetSysClockFreq+0x440>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08003279 	.word	0x08003279
 8002e7c:	08003279 	.word	0x08003279
 8002e80:	08003279 	.word	0x08003279
 8002e84:	08002eb1 	.word	0x08002eb1
 8002e88:	08003279 	.word	0x08003279
 8002e8c:	08003279 	.word	0x08003279
 8002e90:	08003279 	.word	0x08003279
 8002e94:	08002eb9 	.word	0x08002eb9
 8002e98:	08003279 	.word	0x08003279
 8002e9c:	08003279 	.word	0x08003279
 8002ea0:	08003279 	.word	0x08003279
 8002ea4:	080030a9 	.word	0x080030a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4bb9      	ldr	r3, [pc, #740]	; (8003190 <HAL_RCC_GetSysClockFreq+0x358>)
 8002eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002eae:	e1e7      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb0:	4bb8      	ldr	r3, [pc, #736]	; (8003194 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eb6:	e1e3      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb8:	4bb4      	ldr	r3, [pc, #720]	; (800318c <HAL_RCC_GetSysClockFreq+0x354>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec4:	4bb1      	ldr	r3, [pc, #708]	; (800318c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d071      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed0:	4bae      	ldr	r3, [pc, #696]	; (800318c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002edc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	462b      	mov	r3, r5
 8002efa:	f04f 0000 	mov.w	r0, #0
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	0159      	lsls	r1, r3, #5
 8002f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f08:	0150      	lsls	r0, r2, #5
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4621      	mov	r1, r4
 8002f10:	1a51      	subs	r1, r2, r1
 8002f12:	6439      	str	r1, [r7, #64]	; 0x40
 8002f14:	4629      	mov	r1, r5
 8002f16:	eb63 0301 	sbc.w	r3, r3, r1
 8002f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f28:	4649      	mov	r1, r9
 8002f2a:	018b      	lsls	r3, r1, #6
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f32:	4641      	mov	r1, r8
 8002f34:	018a      	lsls	r2, r1, #6
 8002f36:	4641      	mov	r1, r8
 8002f38:	1a51      	subs	r1, r2, r1
 8002f3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f3c:	4649      	mov	r1, r9
 8002f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f50:	4649      	mov	r1, r9
 8002f52:	00cb      	lsls	r3, r1, #3
 8002f54:	4641      	mov	r1, r8
 8002f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	00ca      	lsls	r2, r1, #3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	4622      	mov	r2, r4
 8002f66:	189b      	adds	r3, r3, r2
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
 8002f6a:	462b      	mov	r3, r5
 8002f6c:	460a      	mov	r2, r1
 8002f6e:	eb42 0303 	adc.w	r3, r2, r3
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f80:	4629      	mov	r1, r5
 8002f82:	024b      	lsls	r3, r1, #9
 8002f84:	4621      	mov	r1, r4
 8002f86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	024a      	lsls	r2, r1, #9
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fa0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fa4:	f7fd f984 	bl	80002b0 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4613      	mov	r3, r2
 8002fae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fb2:	e067      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb4:	4b75      	ldr	r3, [pc, #468]	; (800318c <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fc0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fce:	2300      	movs	r3, #0
 8002fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fd2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	0159      	lsls	r1, r3, #5
 8002fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe8:	0150      	lsls	r0, r2, #5
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4621      	mov	r1, r4
 8002ff0:	1a51      	subs	r1, r2, r1
 8002ff2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003008:	4649      	mov	r1, r9
 800300a:	018b      	lsls	r3, r1, #6
 800300c:	4641      	mov	r1, r8
 800300e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003012:	4641      	mov	r1, r8
 8003014:	018a      	lsls	r2, r1, #6
 8003016:	4641      	mov	r1, r8
 8003018:	ebb2 0a01 	subs.w	sl, r2, r1
 800301c:	4649      	mov	r1, r9
 800301e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800302e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003032:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003036:	4692      	mov	sl, r2
 8003038:	469b      	mov	fp, r3
 800303a:	4623      	mov	r3, r4
 800303c:	eb1a 0303 	adds.w	r3, sl, r3
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	462b      	mov	r3, r5
 8003044:	eb4b 0303 	adc.w	r3, fp, r3
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003056:	4629      	mov	r1, r5
 8003058:	028b      	lsls	r3, r1, #10
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003060:	4621      	mov	r1, r4
 8003062:	028a      	lsls	r2, r1, #10
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800306c:	2200      	movs	r2, #0
 800306e:	673b      	str	r3, [r7, #112]	; 0x70
 8003070:	677a      	str	r2, [r7, #116]	; 0x74
 8003072:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003076:	f7fd f91b 	bl	80002b0 <__aeabi_uldivmod>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4613      	mov	r3, r2
 8003080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003084:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCC_GetSysClockFreq+0x354>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	3301      	adds	r3, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003096:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800309a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030a6:	e0eb      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a8:	4b38      	ldr	r3, [pc, #224]	; (800318c <HAL_RCC_GetSysClockFreq+0x354>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <HAL_RCC_GetSysClockFreq+0x354>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d06b      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c0:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_RCC_GetSysClockFreq+0x354>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	2200      	movs	r2, #0
 80030c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80030ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d2:	663b      	str	r3, [r7, #96]	; 0x60
 80030d4:	2300      	movs	r3, #0
 80030d6:	667b      	str	r3, [r7, #100]	; 0x64
 80030d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030dc:	4622      	mov	r2, r4
 80030de:	462b      	mov	r3, r5
 80030e0:	f04f 0000 	mov.w	r0, #0
 80030e4:	f04f 0100 	mov.w	r1, #0
 80030e8:	0159      	lsls	r1, r3, #5
 80030ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ee:	0150      	lsls	r0, r2, #5
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4621      	mov	r1, r4
 80030f6:	1a51      	subs	r1, r2, r1
 80030f8:	61b9      	str	r1, [r7, #24]
 80030fa:	4629      	mov	r1, r5
 80030fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800310e:	4659      	mov	r1, fp
 8003110:	018b      	lsls	r3, r1, #6
 8003112:	4651      	mov	r1, sl
 8003114:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003118:	4651      	mov	r1, sl
 800311a:	018a      	lsls	r2, r1, #6
 800311c:	4651      	mov	r1, sl
 800311e:	ebb2 0801 	subs.w	r8, r2, r1
 8003122:	4659      	mov	r1, fp
 8003124:	eb63 0901 	sbc.w	r9, r3, r1
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003134:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003138:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313c:	4690      	mov	r8, r2
 800313e:	4699      	mov	r9, r3
 8003140:	4623      	mov	r3, r4
 8003142:	eb18 0303 	adds.w	r3, r8, r3
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	462b      	mov	r3, r5
 800314a:	eb49 0303 	adc.w	r3, r9, r3
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800315c:	4629      	mov	r1, r5
 800315e:	024b      	lsls	r3, r1, #9
 8003160:	4621      	mov	r1, r4
 8003162:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003166:	4621      	mov	r1, r4
 8003168:	024a      	lsls	r2, r1, #9
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003172:	2200      	movs	r2, #0
 8003174:	65bb      	str	r3, [r7, #88]	; 0x58
 8003176:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003178:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800317c:	f7fd f898 	bl	80002b0 <__aeabi_uldivmod>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4613      	mov	r3, r2
 8003186:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800318a:	e065      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x420>
 800318c:	40023800 	.word	0x40023800
 8003190:	00f42400 	.word	0x00f42400
 8003194:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003198:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_RCC_GetSysClockFreq+0x458>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	2200      	movs	r2, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	4611      	mov	r1, r2
 80031a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031a8:	653b      	str	r3, [r7, #80]	; 0x50
 80031aa:	2300      	movs	r3, #0
 80031ac:	657b      	str	r3, [r7, #84]	; 0x54
 80031ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031b2:	4642      	mov	r2, r8
 80031b4:	464b      	mov	r3, r9
 80031b6:	f04f 0000 	mov.w	r0, #0
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	0159      	lsls	r1, r3, #5
 80031c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c4:	0150      	lsls	r0, r2, #5
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4641      	mov	r1, r8
 80031cc:	1a51      	subs	r1, r2, r1
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	4649      	mov	r1, r9
 80031d2:	eb63 0301 	sbc.w	r3, r3, r1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031e4:	4659      	mov	r1, fp
 80031e6:	018b      	lsls	r3, r1, #6
 80031e8:	4651      	mov	r1, sl
 80031ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ee:	4651      	mov	r1, sl
 80031f0:	018a      	lsls	r2, r1, #6
 80031f2:	4651      	mov	r1, sl
 80031f4:	1a54      	subs	r4, r2, r1
 80031f6:	4659      	mov	r1, fp
 80031f8:	eb63 0501 	sbc.w	r5, r3, r1
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	00eb      	lsls	r3, r5, #3
 8003206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800320a:	00e2      	lsls	r2, r4, #3
 800320c:	4614      	mov	r4, r2
 800320e:	461d      	mov	r5, r3
 8003210:	4643      	mov	r3, r8
 8003212:	18e3      	adds	r3, r4, r3
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	464b      	mov	r3, r9
 8003218:	eb45 0303 	adc.w	r3, r5, r3
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800322a:	4629      	mov	r1, r5
 800322c:	028b      	lsls	r3, r1, #10
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003234:	4621      	mov	r1, r4
 8003236:	028a      	lsls	r2, r1, #10
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003240:	2200      	movs	r2, #0
 8003242:	64bb      	str	r3, [r7, #72]	; 0x48
 8003244:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003246:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800324a:	f7fd f831 	bl	80002b0 <__aeabi_uldivmod>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4613      	mov	r3, r2
 8003254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <HAL_RCC_GetSysClockFreq+0x458>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0f1b      	lsrs	r3, r3, #28
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800326a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003276:	e003      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_GetSysClockFreq+0x45c>)
 800327a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800327e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003284:	4618      	mov	r0, r3
 8003286:	37b8      	adds	r7, #184	; 0xb8
 8003288:	46bd      	mov	sp, r7
 800328a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	00f42400 	.word	0x00f42400

08003298 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e28d      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8083 	beq.w	80033be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032b8:	4b94      	ldr	r3, [pc, #592]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d019      	beq.n	80032f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c4:	4b91      	ldr	r3, [pc, #580]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032d0:	4b8e      	ldr	r3, [pc, #568]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032dc:	d00c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032de:	4b8b      	ldr	r3, [pc, #556]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d112      	bne.n	8003310 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ea:	4b88      	ldr	r3, [pc, #544]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f6:	d10b      	bne.n	8003310 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	4b84      	ldr	r3, [pc, #528]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d05b      	beq.n	80033bc <HAL_RCC_OscConfig+0x124>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d157      	bne.n	80033bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e25a      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x90>
 800331a:	4b7c      	ldr	r3, [pc, #496]	; (800350c <HAL_RCC_OscConfig+0x274>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a7b      	ldr	r2, [pc, #492]	; (800350c <HAL_RCC_OscConfig+0x274>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e01d      	b.n	8003364 <HAL_RCC_OscConfig+0xcc>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0xb4>
 8003332:	4b76      	ldr	r3, [pc, #472]	; (800350c <HAL_RCC_OscConfig+0x274>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a75      	ldr	r2, [pc, #468]	; (800350c <HAL_RCC_OscConfig+0x274>)
 8003338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b73      	ldr	r3, [pc, #460]	; (800350c <HAL_RCC_OscConfig+0x274>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a72      	ldr	r2, [pc, #456]	; (800350c <HAL_RCC_OscConfig+0x274>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0xcc>
 800334c:	4b6f      	ldr	r3, [pc, #444]	; (800350c <HAL_RCC_OscConfig+0x274>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6e      	ldr	r2, [pc, #440]	; (800350c <HAL_RCC_OscConfig+0x274>)
 8003352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4b6c      	ldr	r3, [pc, #432]	; (800350c <HAL_RCC_OscConfig+0x274>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a6b      	ldr	r2, [pc, #428]	; (800350c <HAL_RCC_OscConfig+0x274>)
 800335e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd ffb4 	bl	80012d8 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003374:	f7fd ffb0 	bl	80012d8 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e21f      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b61      	ldr	r3, [pc, #388]	; (800350c <HAL_RCC_OscConfig+0x274>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0xdc>
 8003392:	e014      	b.n	80033be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fd ffa0 	bl	80012d8 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339c:	f7fd ff9c 	bl	80012d8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e20b      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ae:	4b57      	ldr	r3, [pc, #348]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x104>
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d06f      	beq.n	80034aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033ca:	4b50      	ldr	r3, [pc, #320]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d017      	beq.n	8003406 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033d6:	4b4d      	ldr	r3, [pc, #308]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d105      	bne.n	80033ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033e2:	4b4a      	ldr	r3, [pc, #296]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ee:	4b47      	ldr	r3, [pc, #284]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d11c      	bne.n	8003434 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fa:	4b44      	ldr	r3, [pc, #272]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d116      	bne.n	8003434 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	4b41      	ldr	r3, [pc, #260]	; (800350c <HAL_RCC_OscConfig+0x274>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_RCC_OscConfig+0x186>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d001      	beq.n	800341e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e1d3      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCC_OscConfig+0x274>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4937      	ldr	r1, [pc, #220]	; (800350c <HAL_RCC_OscConfig+0x274>)
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	e03a      	b.n	80034aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d020      	beq.n	800347e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800343c:	4b34      	ldr	r3, [pc, #208]	; (8003510 <HAL_RCC_OscConfig+0x278>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fd ff49 	bl	80012d8 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344a:	f7fd ff45 	bl	80012d8 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1b4      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345c:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_RCC_OscConfig+0x274>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	4b28      	ldr	r3, [pc, #160]	; (800350c <HAL_RCC_OscConfig+0x274>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4925      	ldr	r1, [pc, #148]	; (800350c <HAL_RCC_OscConfig+0x274>)
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
 800347c:	e015      	b.n	80034aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347e:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_RCC_OscConfig+0x278>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fd ff28 	bl	80012d8 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348c:	f7fd ff24 	bl	80012d8 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e193      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d036      	beq.n	8003524 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fd ff08 	bl	80012d8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034cc:	f7fd ff04 	bl	80012d8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e173      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80034e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x234>
 80034ea:	e01b      	b.n	8003524 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fd fef1 	bl	80012d8 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f8:	e00e      	b.n	8003518 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fa:	f7fd feed 	bl	80012d8 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d907      	bls.n	8003518 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e15c      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
 800350c:	40023800 	.word	0x40023800
 8003510:	42470000 	.word	0x42470000
 8003514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	4b8a      	ldr	r3, [pc, #552]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 800351a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ea      	bne.n	80034fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8097 	beq.w	8003660 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003532:	2300      	movs	r3, #0
 8003534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003536:	4b83      	ldr	r3, [pc, #524]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10f      	bne.n	8003562 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	4b7f      	ldr	r3, [pc, #508]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	4a7e      	ldr	r2, [pc, #504]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003550:	6413      	str	r3, [r2, #64]	; 0x40
 8003552:	4b7c      	ldr	r3, [pc, #496]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355e:	2301      	movs	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003562:	4b79      	ldr	r3, [pc, #484]	; (8003748 <HAL_RCC_OscConfig+0x4b0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d118      	bne.n	80035a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800356e:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCC_OscConfig+0x4b0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a75      	ldr	r2, [pc, #468]	; (8003748 <HAL_RCC_OscConfig+0x4b0>)
 8003574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357a:	f7fd fead 	bl	80012d8 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003582:	f7fd fea9 	bl	80012d8 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e118      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003594:	4b6c      	ldr	r3, [pc, #432]	; (8003748 <HAL_RCC_OscConfig+0x4b0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d106      	bne.n	80035b6 <HAL_RCC_OscConfig+0x31e>
 80035a8:	4b66      	ldr	r3, [pc, #408]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	4a65      	ldr	r2, [pc, #404]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	; 0x70
 80035b4:	e01c      	b.n	80035f0 <HAL_RCC_OscConfig+0x358>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x340>
 80035be:	4b61      	ldr	r3, [pc, #388]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	4a60      	ldr	r2, [pc, #384]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ca:	4b5e      	ldr	r3, [pc, #376]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	4a5d      	ldr	r2, [pc, #372]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6713      	str	r3, [r2, #112]	; 0x70
 80035d6:	e00b      	b.n	80035f0 <HAL_RCC_OscConfig+0x358>
 80035d8:	4b5a      	ldr	r3, [pc, #360]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a59      	ldr	r2, [pc, #356]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	6713      	str	r3, [r2, #112]	; 0x70
 80035e4:	4b57      	ldr	r3, [pc, #348]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a56      	ldr	r2, [pc, #344]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80035ea:	f023 0304 	bic.w	r3, r3, #4
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d015      	beq.n	8003624 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fd fe6e 	bl	80012d8 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fd fe6a 	bl	80012d8 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e0d7      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003616:	4b4b      	ldr	r3, [pc, #300]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0ee      	beq.n	8003600 <HAL_RCC_OscConfig+0x368>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fd fe58 	bl	80012d8 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fd fe54 	bl	80012d8 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0c1      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003642:	4b40      	ldr	r3, [pc, #256]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1ee      	bne.n	800362c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d105      	bne.n	8003660 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003654:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	4a3a      	ldr	r2, [pc, #232]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 800365a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800365e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80ad 	beq.w	80037c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800366a:	4b36      	ldr	r3, [pc, #216]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b08      	cmp	r3, #8
 8003674:	d060      	beq.n	8003738 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d145      	bne.n	800370a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b33      	ldr	r3, [pc, #204]	; (800374c <HAL_RCC_OscConfig+0x4b4>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd fe28 	bl	80012d8 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368c:	f7fd fe24 	bl	80012d8 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e093      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	4b29      	ldr	r3, [pc, #164]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69da      	ldr	r2, [r3, #28]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	019b      	lsls	r3, r3, #6
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	3b01      	subs	r3, #1
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	061b      	lsls	r3, r3, #24
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	071b      	lsls	r3, r3, #28
 80036d6:	491b      	ldr	r1, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_RCC_OscConfig+0x4b4>)
 80036de:	2201      	movs	r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fd fdf9 	bl	80012d8 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fd fdf5 	bl	80012d8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e064      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x452>
 8003708:	e05c      	b.n	80037c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_RCC_OscConfig+0x4b4>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd fde2 	bl	80012d8 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003718:	f7fd fdde 	bl	80012d8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e04d      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_OscConfig+0x4ac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x480>
 8003736:	e045      	b.n	80037c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d107      	bne.n	8003750 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e040      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
 8003744:	40023800 	.word	0x40023800
 8003748:	40007000 	.word	0x40007000
 800374c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003750:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <HAL_RCC_OscConfig+0x538>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d030      	beq.n	80037c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d129      	bne.n	80037c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d122      	bne.n	80037c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003780:	4013      	ands	r3, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003788:	4293      	cmp	r3, r2
 800378a:	d119      	bne.n	80037c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	3b01      	subs	r3, #1
 800379a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d10f      	bne.n	80037c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e041      	b.n	800386a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd fb10 	bl	8000e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f000 f9ce 	bl	8003bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d001      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e04e      	b.n	800392a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a23      	ldr	r2, [pc, #140]	; (8003938 <HAL_TIM_Base_Start_IT+0xc4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d022      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b6:	d01d      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1f      	ldr	r2, [pc, #124]	; (800393c <HAL_TIM_Base_Start_IT+0xc8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d018      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <HAL_TIM_Base_Start_IT+0xcc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_TIM_Base_Start_IT+0xd0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_TIM_Base_Start_IT+0xd4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_TIM_Base_Start_IT+0xd8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x80>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_TIM_Base_Start_IT+0xdc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d111      	bne.n	8003918 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b06      	cmp	r3, #6
 8003904:	d010      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	e007      	b.n	8003928 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800
 8003944:	40000c00 	.word	0x40000c00
 8003948:	40010400 	.word	0x40010400
 800394c:	40014000 	.word	0x40014000
 8003950:	40001800 	.word	0x40001800

08003954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d122      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d11b      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0202 	mvn.w	r2, #2
 8003980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f8ee 	bl	8003b78 <HAL_TIM_IC_CaptureCallback>
 800399c:	e005      	b.n	80039aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8e0 	bl	8003b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8f1 	bl	8003b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d122      	bne.n	8003a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d11b      	bne.n	8003a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0204 	mvn.w	r2, #4
 80039d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f8c4 	bl	8003b78 <HAL_TIM_IC_CaptureCallback>
 80039f0:	e005      	b.n	80039fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8b6 	bl	8003b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f8c7 	bl	8003b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d122      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d11b      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0208 	mvn.w	r2, #8
 8003a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f89a 	bl	8003b78 <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f88c 	bl	8003b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f89d 	bl	8003b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d122      	bne.n	8003aac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d11b      	bne.n	8003aac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0210 	mvn.w	r2, #16
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2208      	movs	r2, #8
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f870 	bl	8003b78 <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f862 	bl	8003b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f873 	bl	8003b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d107      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0201 	mvn.w	r2, #1
 8003ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fc fec4 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	d10e      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	d107      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f902 	bl	8003d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d107      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f838 	bl	8003ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d10e      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d107      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0220 	mvn.w	r2, #32
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8cc 	bl	8003cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a40      	ldr	r2, [pc, #256]	; (8003cc8 <TIM_Base_SetConfig+0x114>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <TIM_Base_SetConfig+0x40>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd2:	d00f      	beq.n	8003bf4 <TIM_Base_SetConfig+0x40>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a3d      	ldr	r2, [pc, #244]	; (8003ccc <TIM_Base_SetConfig+0x118>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00b      	beq.n	8003bf4 <TIM_Base_SetConfig+0x40>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a3c      	ldr	r2, [pc, #240]	; (8003cd0 <TIM_Base_SetConfig+0x11c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <TIM_Base_SetConfig+0x40>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <TIM_Base_SetConfig+0x120>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a3a      	ldr	r2, [pc, #232]	; (8003cd8 <TIM_Base_SetConfig+0x124>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d108      	bne.n	8003c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2f      	ldr	r2, [pc, #188]	; (8003cc8 <TIM_Base_SetConfig+0x114>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02b      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d027      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a2c      	ldr	r2, [pc, #176]	; (8003ccc <TIM_Base_SetConfig+0x118>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d023      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <TIM_Base_SetConfig+0x11c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01f      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a2a      	ldr	r2, [pc, #168]	; (8003cd4 <TIM_Base_SetConfig+0x120>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01b      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a29      	ldr	r2, [pc, #164]	; (8003cd8 <TIM_Base_SetConfig+0x124>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d017      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a28      	ldr	r2, [pc, #160]	; (8003cdc <TIM_Base_SetConfig+0x128>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a27      	ldr	r2, [pc, #156]	; (8003ce0 <TIM_Base_SetConfig+0x12c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00f      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a26      	ldr	r2, [pc, #152]	; (8003ce4 <TIM_Base_SetConfig+0x130>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00b      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a25      	ldr	r2, [pc, #148]	; (8003ce8 <TIM_Base_SetConfig+0x134>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d007      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a24      	ldr	r2, [pc, #144]	; (8003cec <TIM_Base_SetConfig+0x138>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <TIM_Base_SetConfig+0x13c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <TIM_Base_SetConfig+0x114>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_Base_SetConfig+0xf8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a0c      	ldr	r2, [pc, #48]	; (8003cd8 <TIM_Base_SetConfig+0x124>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d103      	bne.n	8003cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	615a      	str	r2, [r3, #20]
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40000800 	.word	0x40000800
 8003cd4:	40000c00 	.word	0x40000c00
 8003cd8:	40010400 	.word	0x40010400
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800
 8003ce8:	40001800 	.word	0x40001800
 8003cec:	40001c00 	.word	0x40001c00
 8003cf0:	40002000 	.word	0x40002000

08003cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e03f      	b.n	8003dae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd f894 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	; 0x24
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f929 	bl	8003fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b08a      	sub	sp, #40	; 0x28
 8003dba:	af02      	add	r7, sp, #8
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d17c      	bne.n	8003ed0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_UART_Transmit+0x2c>
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e075      	b.n	8003ed2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_UART_Transmit+0x3e>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e06e      	b.n	8003ed2 <HAL_UART_Transmit+0x11c>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2221      	movs	r2, #33	; 0x21
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e0a:	f7fd fa65 	bl	80012d8 <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	88fa      	ldrh	r2, [r7, #6]
 8003e1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e24:	d108      	bne.n	8003e38 <HAL_UART_Transmit+0x82>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d104      	bne.n	8003e38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e003      	b.n	8003e40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e48:	e02a      	b.n	8003ea0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2200      	movs	r2, #0
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f840 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e036      	b.n	8003ed2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	e007      	b.n	8003e92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1cf      	bne.n	8003e4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2140      	movs	r1, #64	; 0x40
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f810 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e006      	b.n	8003ed2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b090      	sub	sp, #64	; 0x40
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eea:	e050      	b.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d04c      	beq.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x30>
 8003efa:	f7fd f9ed 	bl	80012d8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d241      	bcs.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f2a:	637a      	str	r2, [r7, #52]	; 0x34
 8003f2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3314      	adds	r3, #20
 8003f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f5e:	623a      	str	r2, [r7, #32]
 8003f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	69f9      	ldr	r1, [r7, #28]
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e5      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e00f      	b.n	8003fae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4013      	ands	r3, r2
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2301      	moveq	r3, #1
 8003fa0:	2300      	movne	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d09f      	beq.n	8003eec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3740      	adds	r7, #64	; 0x40
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fbc:	b0c0      	sub	sp, #256	; 0x100
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	68d9      	ldr	r1, [r3, #12]
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	ea40 0301 	orr.w	r3, r0, r1
 8003fe0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004010:	f021 010c 	bic.w	r1, r1, #12
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800401e:	430b      	orrs	r3, r1
 8004020:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004032:	6999      	ldr	r1, [r3, #24]
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	ea40 0301 	orr.w	r3, r0, r1
 800403e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b8f      	ldr	r3, [pc, #572]	; (8004284 <UART_SetConfig+0x2cc>)
 8004048:	429a      	cmp	r2, r3
 800404a:	d005      	beq.n	8004058 <UART_SetConfig+0xa0>
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b8d      	ldr	r3, [pc, #564]	; (8004288 <UART_SetConfig+0x2d0>)
 8004054:	429a      	cmp	r2, r3
 8004056:	d104      	bne.n	8004062 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004058:	f7fe feda 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 800405c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004060:	e003      	b.n	800406a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004062:	f7fe fec1 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8004066:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004074:	f040 810c 	bne.w	8004290 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407c:	2200      	movs	r2, #0
 800407e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004082:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004086:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800408a:	4622      	mov	r2, r4
 800408c:	462b      	mov	r3, r5
 800408e:	1891      	adds	r1, r2, r2
 8004090:	65b9      	str	r1, [r7, #88]	; 0x58
 8004092:	415b      	adcs	r3, r3
 8004094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800409a:	4621      	mov	r1, r4
 800409c:	eb12 0801 	adds.w	r8, r2, r1
 80040a0:	4629      	mov	r1, r5
 80040a2:	eb43 0901 	adc.w	r9, r3, r1
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ba:	4690      	mov	r8, r2
 80040bc:	4699      	mov	r9, r3
 80040be:	4623      	mov	r3, r4
 80040c0:	eb18 0303 	adds.w	r3, r8, r3
 80040c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040c8:	462b      	mov	r3, r5
 80040ca:	eb49 0303 	adc.w	r3, r9, r3
 80040ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040e6:	460b      	mov	r3, r1
 80040e8:	18db      	adds	r3, r3, r3
 80040ea:	653b      	str	r3, [r7, #80]	; 0x50
 80040ec:	4613      	mov	r3, r2
 80040ee:	eb42 0303 	adc.w	r3, r2, r3
 80040f2:	657b      	str	r3, [r7, #84]	; 0x54
 80040f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040fc:	f7fc f8d8 	bl	80002b0 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4b61      	ldr	r3, [pc, #388]	; (800428c <UART_SetConfig+0x2d4>)
 8004106:	fba3 2302 	umull	r2, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	011c      	lsls	r4, r3, #4
 800410e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004112:	2200      	movs	r2, #0
 8004114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004118:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800411c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004120:	4642      	mov	r2, r8
 8004122:	464b      	mov	r3, r9
 8004124:	1891      	adds	r1, r2, r2
 8004126:	64b9      	str	r1, [r7, #72]	; 0x48
 8004128:	415b      	adcs	r3, r3
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004130:	4641      	mov	r1, r8
 8004132:	eb12 0a01 	adds.w	sl, r2, r1
 8004136:	4649      	mov	r1, r9
 8004138:	eb43 0b01 	adc.w	fp, r3, r1
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004148:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800414c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004150:	4692      	mov	sl, r2
 8004152:	469b      	mov	fp, r3
 8004154:	4643      	mov	r3, r8
 8004156:	eb1a 0303 	adds.w	r3, sl, r3
 800415a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800415e:	464b      	mov	r3, r9
 8004160:	eb4b 0303 	adc.w	r3, fp, r3
 8004164:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004174:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004178:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800417c:	460b      	mov	r3, r1
 800417e:	18db      	adds	r3, r3, r3
 8004180:	643b      	str	r3, [r7, #64]	; 0x40
 8004182:	4613      	mov	r3, r2
 8004184:	eb42 0303 	adc.w	r3, r2, r3
 8004188:	647b      	str	r3, [r7, #68]	; 0x44
 800418a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800418e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004192:	f7fc f88d 	bl	80002b0 <__aeabi_uldivmod>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4611      	mov	r1, r2
 800419c:	4b3b      	ldr	r3, [pc, #236]	; (800428c <UART_SetConfig+0x2d4>)
 800419e:	fba3 2301 	umull	r2, r3, r3, r1
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2264      	movs	r2, #100	; 0x64
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	1acb      	subs	r3, r1, r3
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041b2:	4b36      	ldr	r3, [pc, #216]	; (800428c <UART_SetConfig+0x2d4>)
 80041b4:	fba3 2302 	umull	r2, r3, r3, r2
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041c0:	441c      	add	r4, r3
 80041c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041d4:	4642      	mov	r2, r8
 80041d6:	464b      	mov	r3, r9
 80041d8:	1891      	adds	r1, r2, r2
 80041da:	63b9      	str	r1, [r7, #56]	; 0x38
 80041dc:	415b      	adcs	r3, r3
 80041de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041e4:	4641      	mov	r1, r8
 80041e6:	1851      	adds	r1, r2, r1
 80041e8:	6339      	str	r1, [r7, #48]	; 0x30
 80041ea:	4649      	mov	r1, r9
 80041ec:	414b      	adcs	r3, r1
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041fc:	4659      	mov	r1, fp
 80041fe:	00cb      	lsls	r3, r1, #3
 8004200:	4651      	mov	r1, sl
 8004202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004206:	4651      	mov	r1, sl
 8004208:	00ca      	lsls	r2, r1, #3
 800420a:	4610      	mov	r0, r2
 800420c:	4619      	mov	r1, r3
 800420e:	4603      	mov	r3, r0
 8004210:	4642      	mov	r2, r8
 8004212:	189b      	adds	r3, r3, r2
 8004214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004218:	464b      	mov	r3, r9
 800421a:	460a      	mov	r2, r1
 800421c:	eb42 0303 	adc.w	r3, r2, r3
 8004220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004230:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004234:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004238:	460b      	mov	r3, r1
 800423a:	18db      	adds	r3, r3, r3
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
 800423e:	4613      	mov	r3, r2
 8004240:	eb42 0303 	adc.w	r3, r2, r3
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800424a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800424e:	f7fc f82f 	bl	80002b0 <__aeabi_uldivmod>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <UART_SetConfig+0x2d4>)
 8004258:	fba3 1302 	umull	r1, r3, r3, r2
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	2164      	movs	r1, #100	; 0x64
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	3332      	adds	r3, #50	; 0x32
 800426a:	4a08      	ldr	r2, [pc, #32]	; (800428c <UART_SetConfig+0x2d4>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	f003 0207 	and.w	r2, r3, #7
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4422      	add	r2, r4
 800427e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004280:	e105      	b.n	800448e <UART_SetConfig+0x4d6>
 8004282:	bf00      	nop
 8004284:	40011000 	.word	0x40011000
 8004288:	40011400 	.word	0x40011400
 800428c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004294:	2200      	movs	r2, #0
 8004296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800429a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800429e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042a2:	4642      	mov	r2, r8
 80042a4:	464b      	mov	r3, r9
 80042a6:	1891      	adds	r1, r2, r2
 80042a8:	6239      	str	r1, [r7, #32]
 80042aa:	415b      	adcs	r3, r3
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
 80042ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042b2:	4641      	mov	r1, r8
 80042b4:	1854      	adds	r4, r2, r1
 80042b6:	4649      	mov	r1, r9
 80042b8:	eb43 0501 	adc.w	r5, r3, r1
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	00eb      	lsls	r3, r5, #3
 80042c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ca:	00e2      	lsls	r2, r4, #3
 80042cc:	4614      	mov	r4, r2
 80042ce:	461d      	mov	r5, r3
 80042d0:	4643      	mov	r3, r8
 80042d2:	18e3      	adds	r3, r4, r3
 80042d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042d8:	464b      	mov	r3, r9
 80042da:	eb45 0303 	adc.w	r3, r5, r3
 80042de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042fe:	4629      	mov	r1, r5
 8004300:	008b      	lsls	r3, r1, #2
 8004302:	4621      	mov	r1, r4
 8004304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004308:	4621      	mov	r1, r4
 800430a:	008a      	lsls	r2, r1, #2
 800430c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004310:	f7fb ffce 	bl	80002b0 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4b60      	ldr	r3, [pc, #384]	; (800449c <UART_SetConfig+0x4e4>)
 800431a:	fba3 2302 	umull	r2, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	011c      	lsls	r4, r3, #4
 8004322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004326:	2200      	movs	r2, #0
 8004328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800432c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004330:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004334:	4642      	mov	r2, r8
 8004336:	464b      	mov	r3, r9
 8004338:	1891      	adds	r1, r2, r2
 800433a:	61b9      	str	r1, [r7, #24]
 800433c:	415b      	adcs	r3, r3
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004344:	4641      	mov	r1, r8
 8004346:	1851      	adds	r1, r2, r1
 8004348:	6139      	str	r1, [r7, #16]
 800434a:	4649      	mov	r1, r9
 800434c:	414b      	adcs	r3, r1
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800435c:	4659      	mov	r1, fp
 800435e:	00cb      	lsls	r3, r1, #3
 8004360:	4651      	mov	r1, sl
 8004362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004366:	4651      	mov	r1, sl
 8004368:	00ca      	lsls	r2, r1, #3
 800436a:	4610      	mov	r0, r2
 800436c:	4619      	mov	r1, r3
 800436e:	4603      	mov	r3, r0
 8004370:	4642      	mov	r2, r8
 8004372:	189b      	adds	r3, r3, r2
 8004374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004378:	464b      	mov	r3, r9
 800437a:	460a      	mov	r2, r1
 800437c:	eb42 0303 	adc.w	r3, r2, r3
 8004380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	67bb      	str	r3, [r7, #120]	; 0x78
 800438e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800439c:	4649      	mov	r1, r9
 800439e:	008b      	lsls	r3, r1, #2
 80043a0:	4641      	mov	r1, r8
 80043a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a6:	4641      	mov	r1, r8
 80043a8:	008a      	lsls	r2, r1, #2
 80043aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043ae:	f7fb ff7f 	bl	80002b0 <__aeabi_uldivmod>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4b39      	ldr	r3, [pc, #228]	; (800449c <UART_SetConfig+0x4e4>)
 80043b8:	fba3 1302 	umull	r1, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	2164      	movs	r1, #100	; 0x64
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	3332      	adds	r3, #50	; 0x32
 80043ca:	4a34      	ldr	r2, [pc, #208]	; (800449c <UART_SetConfig+0x4e4>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d6:	441c      	add	r4, r3
 80043d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043dc:	2200      	movs	r2, #0
 80043de:	673b      	str	r3, [r7, #112]	; 0x70
 80043e0:	677a      	str	r2, [r7, #116]	; 0x74
 80043e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043e6:	4642      	mov	r2, r8
 80043e8:	464b      	mov	r3, r9
 80043ea:	1891      	adds	r1, r2, r2
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	415b      	adcs	r3, r3
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f6:	4641      	mov	r1, r8
 80043f8:	1851      	adds	r1, r2, r1
 80043fa:	6039      	str	r1, [r7, #0]
 80043fc:	4649      	mov	r1, r9
 80043fe:	414b      	adcs	r3, r1
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800440e:	4659      	mov	r1, fp
 8004410:	00cb      	lsls	r3, r1, #3
 8004412:	4651      	mov	r1, sl
 8004414:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004418:	4651      	mov	r1, sl
 800441a:	00ca      	lsls	r2, r1, #3
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	4603      	mov	r3, r0
 8004422:	4642      	mov	r2, r8
 8004424:	189b      	adds	r3, r3, r2
 8004426:	66bb      	str	r3, [r7, #104]	; 0x68
 8004428:	464b      	mov	r3, r9
 800442a:	460a      	mov	r2, r1
 800442c:	eb42 0303 	adc.w	r3, r2, r3
 8004430:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	663b      	str	r3, [r7, #96]	; 0x60
 800443c:	667a      	str	r2, [r7, #100]	; 0x64
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800444a:	4649      	mov	r1, r9
 800444c:	008b      	lsls	r3, r1, #2
 800444e:	4641      	mov	r1, r8
 8004450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004454:	4641      	mov	r1, r8
 8004456:	008a      	lsls	r2, r1, #2
 8004458:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800445c:	f7fb ff28 	bl	80002b0 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4b0d      	ldr	r3, [pc, #52]	; (800449c <UART_SetConfig+0x4e4>)
 8004466:	fba3 1302 	umull	r1, r3, r3, r2
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	2164      	movs	r1, #100	; 0x64
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	3332      	adds	r3, #50	; 0x32
 8004478:	4a08      	ldr	r2, [pc, #32]	; (800449c <UART_SetConfig+0x4e4>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4422      	add	r2, r4
 800448c:	609a      	str	r2, [r3, #8]
}
 800448e:	bf00      	nop
 8004490:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004494:	46bd      	mov	sp, r7
 8004496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800449a:	bf00      	nop
 800449c:	51eb851f 	.word	0x51eb851f

080044a0 <__errno>:
 80044a0:	4b01      	ldr	r3, [pc, #4]	; (80044a8 <__errno+0x8>)
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000010 	.word	0x20000010

080044ac <__libc_init_array>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	4d0d      	ldr	r5, [pc, #52]	; (80044e4 <__libc_init_array+0x38>)
 80044b0:	4c0d      	ldr	r4, [pc, #52]	; (80044e8 <__libc_init_array+0x3c>)
 80044b2:	1b64      	subs	r4, r4, r5
 80044b4:	10a4      	asrs	r4, r4, #2
 80044b6:	2600      	movs	r6, #0
 80044b8:	42a6      	cmp	r6, r4
 80044ba:	d109      	bne.n	80044d0 <__libc_init_array+0x24>
 80044bc:	4d0b      	ldr	r5, [pc, #44]	; (80044ec <__libc_init_array+0x40>)
 80044be:	4c0c      	ldr	r4, [pc, #48]	; (80044f0 <__libc_init_array+0x44>)
 80044c0:	f001 f824 	bl	800550c <_init>
 80044c4:	1b64      	subs	r4, r4, r5
 80044c6:	10a4      	asrs	r4, r4, #2
 80044c8:	2600      	movs	r6, #0
 80044ca:	42a6      	cmp	r6, r4
 80044cc:	d105      	bne.n	80044da <__libc_init_array+0x2e>
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d4:	4798      	blx	r3
 80044d6:	3601      	adds	r6, #1
 80044d8:	e7ee      	b.n	80044b8 <__libc_init_array+0xc>
 80044da:	f855 3b04 	ldr.w	r3, [r5], #4
 80044de:	4798      	blx	r3
 80044e0:	3601      	adds	r6, #1
 80044e2:	e7f2      	b.n	80044ca <__libc_init_array+0x1e>
 80044e4:	08005690 	.word	0x08005690
 80044e8:	08005690 	.word	0x08005690
 80044ec:	08005690 	.word	0x08005690
 80044f0:	08005694 	.word	0x08005694

080044f4 <memset>:
 80044f4:	4402      	add	r2, r0
 80044f6:	4603      	mov	r3, r0
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d100      	bne.n	80044fe <memset+0xa>
 80044fc:	4770      	bx	lr
 80044fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004502:	e7f9      	b.n	80044f8 <memset+0x4>

08004504 <iprintf>:
 8004504:	b40f      	push	{r0, r1, r2, r3}
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <iprintf+0x2c>)
 8004508:	b513      	push	{r0, r1, r4, lr}
 800450a:	681c      	ldr	r4, [r3, #0]
 800450c:	b124      	cbz	r4, 8004518 <iprintf+0x14>
 800450e:	69a3      	ldr	r3, [r4, #24]
 8004510:	b913      	cbnz	r3, 8004518 <iprintf+0x14>
 8004512:	4620      	mov	r0, r4
 8004514:	f000 fa5e 	bl	80049d4 <__sinit>
 8004518:	ab05      	add	r3, sp, #20
 800451a:	9a04      	ldr	r2, [sp, #16]
 800451c:	68a1      	ldr	r1, [r4, #8]
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	4620      	mov	r0, r4
 8004522:	f000 fc67 	bl	8004df4 <_vfiprintf_r>
 8004526:	b002      	add	sp, #8
 8004528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800452c:	b004      	add	sp, #16
 800452e:	4770      	bx	lr
 8004530:	20000010 	.word	0x20000010

08004534 <_puts_r>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	460e      	mov	r6, r1
 8004538:	4605      	mov	r5, r0
 800453a:	b118      	cbz	r0, 8004544 <_puts_r+0x10>
 800453c:	6983      	ldr	r3, [r0, #24]
 800453e:	b90b      	cbnz	r3, 8004544 <_puts_r+0x10>
 8004540:	f000 fa48 	bl	80049d4 <__sinit>
 8004544:	69ab      	ldr	r3, [r5, #24]
 8004546:	68ac      	ldr	r4, [r5, #8]
 8004548:	b913      	cbnz	r3, 8004550 <_puts_r+0x1c>
 800454a:	4628      	mov	r0, r5
 800454c:	f000 fa42 	bl	80049d4 <__sinit>
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <_puts_r+0xd0>)
 8004552:	429c      	cmp	r4, r3
 8004554:	d120      	bne.n	8004598 <_puts_r+0x64>
 8004556:	686c      	ldr	r4, [r5, #4]
 8004558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800455a:	07db      	lsls	r3, r3, #31
 800455c:	d405      	bmi.n	800456a <_puts_r+0x36>
 800455e:	89a3      	ldrh	r3, [r4, #12]
 8004560:	0598      	lsls	r0, r3, #22
 8004562:	d402      	bmi.n	800456a <_puts_r+0x36>
 8004564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004566:	f000 fad3 	bl	8004b10 <__retarget_lock_acquire_recursive>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	0719      	lsls	r1, r3, #28
 800456e:	d51d      	bpl.n	80045ac <_puts_r+0x78>
 8004570:	6923      	ldr	r3, [r4, #16]
 8004572:	b1db      	cbz	r3, 80045ac <_puts_r+0x78>
 8004574:	3e01      	subs	r6, #1
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800457c:	3b01      	subs	r3, #1
 800457e:	60a3      	str	r3, [r4, #8]
 8004580:	bb39      	cbnz	r1, 80045d2 <_puts_r+0x9e>
 8004582:	2b00      	cmp	r3, #0
 8004584:	da38      	bge.n	80045f8 <_puts_r+0xc4>
 8004586:	4622      	mov	r2, r4
 8004588:	210a      	movs	r1, #10
 800458a:	4628      	mov	r0, r5
 800458c:	f000 f848 	bl	8004620 <__swbuf_r>
 8004590:	3001      	adds	r0, #1
 8004592:	d011      	beq.n	80045b8 <_puts_r+0x84>
 8004594:	250a      	movs	r5, #10
 8004596:	e011      	b.n	80045bc <_puts_r+0x88>
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <_puts_r+0xd4>)
 800459a:	429c      	cmp	r4, r3
 800459c:	d101      	bne.n	80045a2 <_puts_r+0x6e>
 800459e:	68ac      	ldr	r4, [r5, #8]
 80045a0:	e7da      	b.n	8004558 <_puts_r+0x24>
 80045a2:	4b1a      	ldr	r3, [pc, #104]	; (800460c <_puts_r+0xd8>)
 80045a4:	429c      	cmp	r4, r3
 80045a6:	bf08      	it	eq
 80045a8:	68ec      	ldreq	r4, [r5, #12]
 80045aa:	e7d5      	b.n	8004558 <_puts_r+0x24>
 80045ac:	4621      	mov	r1, r4
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 f888 	bl	80046c4 <__swsetup_r>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d0dd      	beq.n	8004574 <_puts_r+0x40>
 80045b8:	f04f 35ff 	mov.w	r5, #4294967295
 80045bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045be:	07da      	lsls	r2, r3, #31
 80045c0:	d405      	bmi.n	80045ce <_puts_r+0x9a>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	059b      	lsls	r3, r3, #22
 80045c6:	d402      	bmi.n	80045ce <_puts_r+0x9a>
 80045c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ca:	f000 faa2 	bl	8004b12 <__retarget_lock_release_recursive>
 80045ce:	4628      	mov	r0, r5
 80045d0:	bd70      	pop	{r4, r5, r6, pc}
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	da04      	bge.n	80045e0 <_puts_r+0xac>
 80045d6:	69a2      	ldr	r2, [r4, #24]
 80045d8:	429a      	cmp	r2, r3
 80045da:	dc06      	bgt.n	80045ea <_puts_r+0xb6>
 80045dc:	290a      	cmp	r1, #10
 80045de:	d004      	beq.n	80045ea <_puts_r+0xb6>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	6022      	str	r2, [r4, #0]
 80045e6:	7019      	strb	r1, [r3, #0]
 80045e8:	e7c5      	b.n	8004576 <_puts_r+0x42>
 80045ea:	4622      	mov	r2, r4
 80045ec:	4628      	mov	r0, r5
 80045ee:	f000 f817 	bl	8004620 <__swbuf_r>
 80045f2:	3001      	adds	r0, #1
 80045f4:	d1bf      	bne.n	8004576 <_puts_r+0x42>
 80045f6:	e7df      	b.n	80045b8 <_puts_r+0x84>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	250a      	movs	r5, #10
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	6022      	str	r2, [r4, #0]
 8004600:	701d      	strb	r5, [r3, #0]
 8004602:	e7db      	b.n	80045bc <_puts_r+0x88>
 8004604:	08005614 	.word	0x08005614
 8004608:	08005634 	.word	0x08005634
 800460c:	080055f4 	.word	0x080055f4

08004610 <puts>:
 8004610:	4b02      	ldr	r3, [pc, #8]	; (800461c <puts+0xc>)
 8004612:	4601      	mov	r1, r0
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	f7ff bf8d 	b.w	8004534 <_puts_r>
 800461a:	bf00      	nop
 800461c:	20000010 	.word	0x20000010

08004620 <__swbuf_r>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	460e      	mov	r6, r1
 8004624:	4614      	mov	r4, r2
 8004626:	4605      	mov	r5, r0
 8004628:	b118      	cbz	r0, 8004632 <__swbuf_r+0x12>
 800462a:	6983      	ldr	r3, [r0, #24]
 800462c:	b90b      	cbnz	r3, 8004632 <__swbuf_r+0x12>
 800462e:	f000 f9d1 	bl	80049d4 <__sinit>
 8004632:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <__swbuf_r+0x98>)
 8004634:	429c      	cmp	r4, r3
 8004636:	d12b      	bne.n	8004690 <__swbuf_r+0x70>
 8004638:	686c      	ldr	r4, [r5, #4]
 800463a:	69a3      	ldr	r3, [r4, #24]
 800463c:	60a3      	str	r3, [r4, #8]
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	071a      	lsls	r2, r3, #28
 8004642:	d52f      	bpl.n	80046a4 <__swbuf_r+0x84>
 8004644:	6923      	ldr	r3, [r4, #16]
 8004646:	b36b      	cbz	r3, 80046a4 <__swbuf_r+0x84>
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	1ac0      	subs	r0, r0, r3
 800464e:	6963      	ldr	r3, [r4, #20]
 8004650:	b2f6      	uxtb	r6, r6
 8004652:	4283      	cmp	r3, r0
 8004654:	4637      	mov	r7, r6
 8004656:	dc04      	bgt.n	8004662 <__swbuf_r+0x42>
 8004658:	4621      	mov	r1, r4
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f926 	bl	80048ac <_fflush_r>
 8004660:	bb30      	cbnz	r0, 80046b0 <__swbuf_r+0x90>
 8004662:	68a3      	ldr	r3, [r4, #8]
 8004664:	3b01      	subs	r3, #1
 8004666:	60a3      	str	r3, [r4, #8]
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	701e      	strb	r6, [r3, #0]
 8004670:	6963      	ldr	r3, [r4, #20]
 8004672:	3001      	adds	r0, #1
 8004674:	4283      	cmp	r3, r0
 8004676:	d004      	beq.n	8004682 <__swbuf_r+0x62>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	07db      	lsls	r3, r3, #31
 800467c:	d506      	bpl.n	800468c <__swbuf_r+0x6c>
 800467e:	2e0a      	cmp	r6, #10
 8004680:	d104      	bne.n	800468c <__swbuf_r+0x6c>
 8004682:	4621      	mov	r1, r4
 8004684:	4628      	mov	r0, r5
 8004686:	f000 f911 	bl	80048ac <_fflush_r>
 800468a:	b988      	cbnz	r0, 80046b0 <__swbuf_r+0x90>
 800468c:	4638      	mov	r0, r7
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <__swbuf_r+0x9c>)
 8004692:	429c      	cmp	r4, r3
 8004694:	d101      	bne.n	800469a <__swbuf_r+0x7a>
 8004696:	68ac      	ldr	r4, [r5, #8]
 8004698:	e7cf      	b.n	800463a <__swbuf_r+0x1a>
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <__swbuf_r+0xa0>)
 800469c:	429c      	cmp	r4, r3
 800469e:	bf08      	it	eq
 80046a0:	68ec      	ldreq	r4, [r5, #12]
 80046a2:	e7ca      	b.n	800463a <__swbuf_r+0x1a>
 80046a4:	4621      	mov	r1, r4
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f80c 	bl	80046c4 <__swsetup_r>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d0cb      	beq.n	8004648 <__swbuf_r+0x28>
 80046b0:	f04f 37ff 	mov.w	r7, #4294967295
 80046b4:	e7ea      	b.n	800468c <__swbuf_r+0x6c>
 80046b6:	bf00      	nop
 80046b8:	08005614 	.word	0x08005614
 80046bc:	08005634 	.word	0x08005634
 80046c0:	080055f4 	.word	0x080055f4

080046c4 <__swsetup_r>:
 80046c4:	4b32      	ldr	r3, [pc, #200]	; (8004790 <__swsetup_r+0xcc>)
 80046c6:	b570      	push	{r4, r5, r6, lr}
 80046c8:	681d      	ldr	r5, [r3, #0]
 80046ca:	4606      	mov	r6, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	b125      	cbz	r5, 80046da <__swsetup_r+0x16>
 80046d0:	69ab      	ldr	r3, [r5, #24]
 80046d2:	b913      	cbnz	r3, 80046da <__swsetup_r+0x16>
 80046d4:	4628      	mov	r0, r5
 80046d6:	f000 f97d 	bl	80049d4 <__sinit>
 80046da:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <__swsetup_r+0xd0>)
 80046dc:	429c      	cmp	r4, r3
 80046de:	d10f      	bne.n	8004700 <__swsetup_r+0x3c>
 80046e0:	686c      	ldr	r4, [r5, #4]
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046e8:	0719      	lsls	r1, r3, #28
 80046ea:	d42c      	bmi.n	8004746 <__swsetup_r+0x82>
 80046ec:	06dd      	lsls	r5, r3, #27
 80046ee:	d411      	bmi.n	8004714 <__swsetup_r+0x50>
 80046f0:	2309      	movs	r3, #9
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	f04f 30ff 	mov.w	r0, #4294967295
 80046fe:	e03e      	b.n	800477e <__swsetup_r+0xba>
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <__swsetup_r+0xd4>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d101      	bne.n	800470a <__swsetup_r+0x46>
 8004706:	68ac      	ldr	r4, [r5, #8]
 8004708:	e7eb      	b.n	80046e2 <__swsetup_r+0x1e>
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <__swsetup_r+0xd8>)
 800470c:	429c      	cmp	r4, r3
 800470e:	bf08      	it	eq
 8004710:	68ec      	ldreq	r4, [r5, #12]
 8004712:	e7e6      	b.n	80046e2 <__swsetup_r+0x1e>
 8004714:	0758      	lsls	r0, r3, #29
 8004716:	d512      	bpl.n	800473e <__swsetup_r+0x7a>
 8004718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800471a:	b141      	cbz	r1, 800472e <__swsetup_r+0x6a>
 800471c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004720:	4299      	cmp	r1, r3
 8004722:	d002      	beq.n	800472a <__swsetup_r+0x66>
 8004724:	4630      	mov	r0, r6
 8004726:	f000 fa5b 	bl	8004be0 <_free_r>
 800472a:	2300      	movs	r3, #0
 800472c:	6363      	str	r3, [r4, #52]	; 0x34
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004734:	81a3      	strh	r3, [r4, #12]
 8004736:	2300      	movs	r3, #0
 8004738:	6063      	str	r3, [r4, #4]
 800473a:	6923      	ldr	r3, [r4, #16]
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f043 0308 	orr.w	r3, r3, #8
 8004744:	81a3      	strh	r3, [r4, #12]
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	b94b      	cbnz	r3, 800475e <__swsetup_r+0x9a>
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004754:	d003      	beq.n	800475e <__swsetup_r+0x9a>
 8004756:	4621      	mov	r1, r4
 8004758:	4630      	mov	r0, r6
 800475a:	f000 fa01 	bl	8004b60 <__smakebuf_r>
 800475e:	89a0      	ldrh	r0, [r4, #12]
 8004760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004764:	f010 0301 	ands.w	r3, r0, #1
 8004768:	d00a      	beq.n	8004780 <__swsetup_r+0xbc>
 800476a:	2300      	movs	r3, #0
 800476c:	60a3      	str	r3, [r4, #8]
 800476e:	6963      	ldr	r3, [r4, #20]
 8004770:	425b      	negs	r3, r3
 8004772:	61a3      	str	r3, [r4, #24]
 8004774:	6923      	ldr	r3, [r4, #16]
 8004776:	b943      	cbnz	r3, 800478a <__swsetup_r+0xc6>
 8004778:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800477c:	d1ba      	bne.n	80046f4 <__swsetup_r+0x30>
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	0781      	lsls	r1, r0, #30
 8004782:	bf58      	it	pl
 8004784:	6963      	ldrpl	r3, [r4, #20]
 8004786:	60a3      	str	r3, [r4, #8]
 8004788:	e7f4      	b.n	8004774 <__swsetup_r+0xb0>
 800478a:	2000      	movs	r0, #0
 800478c:	e7f7      	b.n	800477e <__swsetup_r+0xba>
 800478e:	bf00      	nop
 8004790:	20000010 	.word	0x20000010
 8004794:	08005614 	.word	0x08005614
 8004798:	08005634 	.word	0x08005634
 800479c:	080055f4 	.word	0x080055f4

080047a0 <__sflush_r>:
 80047a0:	898a      	ldrh	r2, [r1, #12]
 80047a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a6:	4605      	mov	r5, r0
 80047a8:	0710      	lsls	r0, r2, #28
 80047aa:	460c      	mov	r4, r1
 80047ac:	d458      	bmi.n	8004860 <__sflush_r+0xc0>
 80047ae:	684b      	ldr	r3, [r1, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	dc05      	bgt.n	80047c0 <__sflush_r+0x20>
 80047b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	dc02      	bgt.n	80047c0 <__sflush_r+0x20>
 80047ba:	2000      	movs	r0, #0
 80047bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047c2:	2e00      	cmp	r6, #0
 80047c4:	d0f9      	beq.n	80047ba <__sflush_r+0x1a>
 80047c6:	2300      	movs	r3, #0
 80047c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047cc:	682f      	ldr	r7, [r5, #0]
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	d032      	beq.n	8004838 <__sflush_r+0x98>
 80047d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	075a      	lsls	r2, r3, #29
 80047d8:	d505      	bpl.n	80047e6 <__sflush_r+0x46>
 80047da:	6863      	ldr	r3, [r4, #4]
 80047dc:	1ac0      	subs	r0, r0, r3
 80047de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047e0:	b10b      	cbz	r3, 80047e6 <__sflush_r+0x46>
 80047e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047e4:	1ac0      	subs	r0, r0, r3
 80047e6:	2300      	movs	r3, #0
 80047e8:	4602      	mov	r2, r0
 80047ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ec:	6a21      	ldr	r1, [r4, #32]
 80047ee:	4628      	mov	r0, r5
 80047f0:	47b0      	blx	r6
 80047f2:	1c43      	adds	r3, r0, #1
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	d106      	bne.n	8004806 <__sflush_r+0x66>
 80047f8:	6829      	ldr	r1, [r5, #0]
 80047fa:	291d      	cmp	r1, #29
 80047fc:	d82c      	bhi.n	8004858 <__sflush_r+0xb8>
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <__sflush_r+0x108>)
 8004800:	40ca      	lsrs	r2, r1
 8004802:	07d6      	lsls	r6, r2, #31
 8004804:	d528      	bpl.n	8004858 <__sflush_r+0xb8>
 8004806:	2200      	movs	r2, #0
 8004808:	6062      	str	r2, [r4, #4]
 800480a:	04d9      	lsls	r1, r3, #19
 800480c:	6922      	ldr	r2, [r4, #16]
 800480e:	6022      	str	r2, [r4, #0]
 8004810:	d504      	bpl.n	800481c <__sflush_r+0x7c>
 8004812:	1c42      	adds	r2, r0, #1
 8004814:	d101      	bne.n	800481a <__sflush_r+0x7a>
 8004816:	682b      	ldr	r3, [r5, #0]
 8004818:	b903      	cbnz	r3, 800481c <__sflush_r+0x7c>
 800481a:	6560      	str	r0, [r4, #84]	; 0x54
 800481c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800481e:	602f      	str	r7, [r5, #0]
 8004820:	2900      	cmp	r1, #0
 8004822:	d0ca      	beq.n	80047ba <__sflush_r+0x1a>
 8004824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004828:	4299      	cmp	r1, r3
 800482a:	d002      	beq.n	8004832 <__sflush_r+0x92>
 800482c:	4628      	mov	r0, r5
 800482e:	f000 f9d7 	bl	8004be0 <_free_r>
 8004832:	2000      	movs	r0, #0
 8004834:	6360      	str	r0, [r4, #52]	; 0x34
 8004836:	e7c1      	b.n	80047bc <__sflush_r+0x1c>
 8004838:	6a21      	ldr	r1, [r4, #32]
 800483a:	2301      	movs	r3, #1
 800483c:	4628      	mov	r0, r5
 800483e:	47b0      	blx	r6
 8004840:	1c41      	adds	r1, r0, #1
 8004842:	d1c7      	bne.n	80047d4 <__sflush_r+0x34>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0c4      	beq.n	80047d4 <__sflush_r+0x34>
 800484a:	2b1d      	cmp	r3, #29
 800484c:	d001      	beq.n	8004852 <__sflush_r+0xb2>
 800484e:	2b16      	cmp	r3, #22
 8004850:	d101      	bne.n	8004856 <__sflush_r+0xb6>
 8004852:	602f      	str	r7, [r5, #0]
 8004854:	e7b1      	b.n	80047ba <__sflush_r+0x1a>
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	e7ad      	b.n	80047bc <__sflush_r+0x1c>
 8004860:	690f      	ldr	r7, [r1, #16]
 8004862:	2f00      	cmp	r7, #0
 8004864:	d0a9      	beq.n	80047ba <__sflush_r+0x1a>
 8004866:	0793      	lsls	r3, r2, #30
 8004868:	680e      	ldr	r6, [r1, #0]
 800486a:	bf08      	it	eq
 800486c:	694b      	ldreq	r3, [r1, #20]
 800486e:	600f      	str	r7, [r1, #0]
 8004870:	bf18      	it	ne
 8004872:	2300      	movne	r3, #0
 8004874:	eba6 0807 	sub.w	r8, r6, r7
 8004878:	608b      	str	r3, [r1, #8]
 800487a:	f1b8 0f00 	cmp.w	r8, #0
 800487e:	dd9c      	ble.n	80047ba <__sflush_r+0x1a>
 8004880:	6a21      	ldr	r1, [r4, #32]
 8004882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004884:	4643      	mov	r3, r8
 8004886:	463a      	mov	r2, r7
 8004888:	4628      	mov	r0, r5
 800488a:	47b0      	blx	r6
 800488c:	2800      	cmp	r0, #0
 800488e:	dc06      	bgt.n	800489e <__sflush_r+0xfe>
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004896:	81a3      	strh	r3, [r4, #12]
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	e78e      	b.n	80047bc <__sflush_r+0x1c>
 800489e:	4407      	add	r7, r0
 80048a0:	eba8 0800 	sub.w	r8, r8, r0
 80048a4:	e7e9      	b.n	800487a <__sflush_r+0xda>
 80048a6:	bf00      	nop
 80048a8:	20400001 	.word	0x20400001

080048ac <_fflush_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	690b      	ldr	r3, [r1, #16]
 80048b0:	4605      	mov	r5, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	b913      	cbnz	r3, 80048bc <_fflush_r+0x10>
 80048b6:	2500      	movs	r5, #0
 80048b8:	4628      	mov	r0, r5
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	b118      	cbz	r0, 80048c6 <_fflush_r+0x1a>
 80048be:	6983      	ldr	r3, [r0, #24]
 80048c0:	b90b      	cbnz	r3, 80048c6 <_fflush_r+0x1a>
 80048c2:	f000 f887 	bl	80049d4 <__sinit>
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <_fflush_r+0x6c>)
 80048c8:	429c      	cmp	r4, r3
 80048ca:	d11b      	bne.n	8004904 <_fflush_r+0x58>
 80048cc:	686c      	ldr	r4, [r5, #4]
 80048ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ef      	beq.n	80048b6 <_fflush_r+0xa>
 80048d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048d8:	07d0      	lsls	r0, r2, #31
 80048da:	d404      	bmi.n	80048e6 <_fflush_r+0x3a>
 80048dc:	0599      	lsls	r1, r3, #22
 80048de:	d402      	bmi.n	80048e6 <_fflush_r+0x3a>
 80048e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e2:	f000 f915 	bl	8004b10 <__retarget_lock_acquire_recursive>
 80048e6:	4628      	mov	r0, r5
 80048e8:	4621      	mov	r1, r4
 80048ea:	f7ff ff59 	bl	80047a0 <__sflush_r>
 80048ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048f0:	07da      	lsls	r2, r3, #31
 80048f2:	4605      	mov	r5, r0
 80048f4:	d4e0      	bmi.n	80048b8 <_fflush_r+0xc>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	059b      	lsls	r3, r3, #22
 80048fa:	d4dd      	bmi.n	80048b8 <_fflush_r+0xc>
 80048fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048fe:	f000 f908 	bl	8004b12 <__retarget_lock_release_recursive>
 8004902:	e7d9      	b.n	80048b8 <_fflush_r+0xc>
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <_fflush_r+0x70>)
 8004906:	429c      	cmp	r4, r3
 8004908:	d101      	bne.n	800490e <_fflush_r+0x62>
 800490a:	68ac      	ldr	r4, [r5, #8]
 800490c:	e7df      	b.n	80048ce <_fflush_r+0x22>
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <_fflush_r+0x74>)
 8004910:	429c      	cmp	r4, r3
 8004912:	bf08      	it	eq
 8004914:	68ec      	ldreq	r4, [r5, #12]
 8004916:	e7da      	b.n	80048ce <_fflush_r+0x22>
 8004918:	08005614 	.word	0x08005614
 800491c:	08005634 	.word	0x08005634
 8004920:	080055f4 	.word	0x080055f4

08004924 <std>:
 8004924:	2300      	movs	r3, #0
 8004926:	b510      	push	{r4, lr}
 8004928:	4604      	mov	r4, r0
 800492a:	e9c0 3300 	strd	r3, r3, [r0]
 800492e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004932:	6083      	str	r3, [r0, #8]
 8004934:	8181      	strh	r1, [r0, #12]
 8004936:	6643      	str	r3, [r0, #100]	; 0x64
 8004938:	81c2      	strh	r2, [r0, #14]
 800493a:	6183      	str	r3, [r0, #24]
 800493c:	4619      	mov	r1, r3
 800493e:	2208      	movs	r2, #8
 8004940:	305c      	adds	r0, #92	; 0x5c
 8004942:	f7ff fdd7 	bl	80044f4 <memset>
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <std+0x38>)
 8004948:	6263      	str	r3, [r4, #36]	; 0x24
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <std+0x3c>)
 800494c:	62a3      	str	r3, [r4, #40]	; 0x28
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <std+0x40>)
 8004950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <std+0x44>)
 8004954:	6224      	str	r4, [r4, #32]
 8004956:	6323      	str	r3, [r4, #48]	; 0x30
 8004958:	bd10      	pop	{r4, pc}
 800495a:	bf00      	nop
 800495c:	0800539d 	.word	0x0800539d
 8004960:	080053bf 	.word	0x080053bf
 8004964:	080053f7 	.word	0x080053f7
 8004968:	0800541b 	.word	0x0800541b

0800496c <_cleanup_r>:
 800496c:	4901      	ldr	r1, [pc, #4]	; (8004974 <_cleanup_r+0x8>)
 800496e:	f000 b8af 	b.w	8004ad0 <_fwalk_reent>
 8004972:	bf00      	nop
 8004974:	080048ad 	.word	0x080048ad

08004978 <__sfmoreglue>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	2268      	movs	r2, #104	; 0x68
 800497c:	1e4d      	subs	r5, r1, #1
 800497e:	4355      	muls	r5, r2
 8004980:	460e      	mov	r6, r1
 8004982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004986:	f000 f997 	bl	8004cb8 <_malloc_r>
 800498a:	4604      	mov	r4, r0
 800498c:	b140      	cbz	r0, 80049a0 <__sfmoreglue+0x28>
 800498e:	2100      	movs	r1, #0
 8004990:	e9c0 1600 	strd	r1, r6, [r0]
 8004994:	300c      	adds	r0, #12
 8004996:	60a0      	str	r0, [r4, #8]
 8004998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800499c:	f7ff fdaa 	bl	80044f4 <memset>
 80049a0:	4620      	mov	r0, r4
 80049a2:	bd70      	pop	{r4, r5, r6, pc}

080049a4 <__sfp_lock_acquire>:
 80049a4:	4801      	ldr	r0, [pc, #4]	; (80049ac <__sfp_lock_acquire+0x8>)
 80049a6:	f000 b8b3 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 80049aa:	bf00      	nop
 80049ac:	20000229 	.word	0x20000229

080049b0 <__sfp_lock_release>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__sfp_lock_release+0x8>)
 80049b2:	f000 b8ae 	b.w	8004b12 <__retarget_lock_release_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000229 	.word	0x20000229

080049bc <__sinit_lock_acquire>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__sinit_lock_acquire+0x8>)
 80049be:	f000 b8a7 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 80049c2:	bf00      	nop
 80049c4:	2000022a 	.word	0x2000022a

080049c8 <__sinit_lock_release>:
 80049c8:	4801      	ldr	r0, [pc, #4]	; (80049d0 <__sinit_lock_release+0x8>)
 80049ca:	f000 b8a2 	b.w	8004b12 <__retarget_lock_release_recursive>
 80049ce:	bf00      	nop
 80049d0:	2000022a 	.word	0x2000022a

080049d4 <__sinit>:
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4604      	mov	r4, r0
 80049d8:	f7ff fff0 	bl	80049bc <__sinit_lock_acquire>
 80049dc:	69a3      	ldr	r3, [r4, #24]
 80049de:	b11b      	cbz	r3, 80049e8 <__sinit+0x14>
 80049e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e4:	f7ff bff0 	b.w	80049c8 <__sinit_lock_release>
 80049e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049ec:	6523      	str	r3, [r4, #80]	; 0x50
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <__sinit+0x68>)
 80049f0:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <__sinit+0x6c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80049f6:	42a3      	cmp	r3, r4
 80049f8:	bf04      	itt	eq
 80049fa:	2301      	moveq	r3, #1
 80049fc:	61a3      	streq	r3, [r4, #24]
 80049fe:	4620      	mov	r0, r4
 8004a00:	f000 f820 	bl	8004a44 <__sfp>
 8004a04:	6060      	str	r0, [r4, #4]
 8004a06:	4620      	mov	r0, r4
 8004a08:	f000 f81c 	bl	8004a44 <__sfp>
 8004a0c:	60a0      	str	r0, [r4, #8]
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 f818 	bl	8004a44 <__sfp>
 8004a14:	2200      	movs	r2, #0
 8004a16:	60e0      	str	r0, [r4, #12]
 8004a18:	2104      	movs	r1, #4
 8004a1a:	6860      	ldr	r0, [r4, #4]
 8004a1c:	f7ff ff82 	bl	8004924 <std>
 8004a20:	68a0      	ldr	r0, [r4, #8]
 8004a22:	2201      	movs	r2, #1
 8004a24:	2109      	movs	r1, #9
 8004a26:	f7ff ff7d 	bl	8004924 <std>
 8004a2a:	68e0      	ldr	r0, [r4, #12]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	2112      	movs	r1, #18
 8004a30:	f7ff ff78 	bl	8004924 <std>
 8004a34:	2301      	movs	r3, #1
 8004a36:	61a3      	str	r3, [r4, #24]
 8004a38:	e7d2      	b.n	80049e0 <__sinit+0xc>
 8004a3a:	bf00      	nop
 8004a3c:	080055f0 	.word	0x080055f0
 8004a40:	0800496d 	.word	0x0800496d

08004a44 <__sfp>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	4607      	mov	r7, r0
 8004a48:	f7ff ffac 	bl	80049a4 <__sfp_lock_acquire>
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <__sfp+0x84>)
 8004a4e:	681e      	ldr	r6, [r3, #0]
 8004a50:	69b3      	ldr	r3, [r6, #24]
 8004a52:	b913      	cbnz	r3, 8004a5a <__sfp+0x16>
 8004a54:	4630      	mov	r0, r6
 8004a56:	f7ff ffbd 	bl	80049d4 <__sinit>
 8004a5a:	3648      	adds	r6, #72	; 0x48
 8004a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	d503      	bpl.n	8004a6c <__sfp+0x28>
 8004a64:	6833      	ldr	r3, [r6, #0]
 8004a66:	b30b      	cbz	r3, 8004aac <__sfp+0x68>
 8004a68:	6836      	ldr	r6, [r6, #0]
 8004a6a:	e7f7      	b.n	8004a5c <__sfp+0x18>
 8004a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a70:	b9d5      	cbnz	r5, 8004aa8 <__sfp+0x64>
 8004a72:	4b16      	ldr	r3, [pc, #88]	; (8004acc <__sfp+0x88>)
 8004a74:	60e3      	str	r3, [r4, #12]
 8004a76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a7a:	6665      	str	r5, [r4, #100]	; 0x64
 8004a7c:	f000 f847 	bl	8004b0e <__retarget_lock_init_recursive>
 8004a80:	f7ff ff96 	bl	80049b0 <__sfp_lock_release>
 8004a84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a8c:	6025      	str	r5, [r4, #0]
 8004a8e:	61a5      	str	r5, [r4, #24]
 8004a90:	2208      	movs	r2, #8
 8004a92:	4629      	mov	r1, r5
 8004a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a98:	f7ff fd2c 	bl	80044f4 <memset>
 8004a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa8:	3468      	adds	r4, #104	; 0x68
 8004aaa:	e7d9      	b.n	8004a60 <__sfp+0x1c>
 8004aac:	2104      	movs	r1, #4
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f7ff ff62 	bl	8004978 <__sfmoreglue>
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	6030      	str	r0, [r6, #0]
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d1d5      	bne.n	8004a68 <__sfp+0x24>
 8004abc:	f7ff ff78 	bl	80049b0 <__sfp_lock_release>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	e7ee      	b.n	8004aa4 <__sfp+0x60>
 8004ac6:	bf00      	nop
 8004ac8:	080055f0 	.word	0x080055f0
 8004acc:	ffff0001 	.word	0xffff0001

08004ad0 <_fwalk_reent>:
 8004ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	4688      	mov	r8, r1
 8004ad8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004adc:	2700      	movs	r7, #0
 8004ade:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ae2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ae6:	d505      	bpl.n	8004af4 <_fwalk_reent+0x24>
 8004ae8:	6824      	ldr	r4, [r4, #0]
 8004aea:	2c00      	cmp	r4, #0
 8004aec:	d1f7      	bne.n	8004ade <_fwalk_reent+0xe>
 8004aee:	4638      	mov	r0, r7
 8004af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004af4:	89ab      	ldrh	r3, [r5, #12]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d907      	bls.n	8004b0a <_fwalk_reent+0x3a>
 8004afa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004afe:	3301      	adds	r3, #1
 8004b00:	d003      	beq.n	8004b0a <_fwalk_reent+0x3a>
 8004b02:	4629      	mov	r1, r5
 8004b04:	4630      	mov	r0, r6
 8004b06:	47c0      	blx	r8
 8004b08:	4307      	orrs	r7, r0
 8004b0a:	3568      	adds	r5, #104	; 0x68
 8004b0c:	e7e9      	b.n	8004ae2 <_fwalk_reent+0x12>

08004b0e <__retarget_lock_init_recursive>:
 8004b0e:	4770      	bx	lr

08004b10 <__retarget_lock_acquire_recursive>:
 8004b10:	4770      	bx	lr

08004b12 <__retarget_lock_release_recursive>:
 8004b12:	4770      	bx	lr

08004b14 <__swhatbuf_r>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	460e      	mov	r6, r1
 8004b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	b096      	sub	sp, #88	; 0x58
 8004b20:	4614      	mov	r4, r2
 8004b22:	461d      	mov	r5, r3
 8004b24:	da08      	bge.n	8004b38 <__swhatbuf_r+0x24>
 8004b26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	602a      	str	r2, [r5, #0]
 8004b2e:	061a      	lsls	r2, r3, #24
 8004b30:	d410      	bmi.n	8004b54 <__swhatbuf_r+0x40>
 8004b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b36:	e00e      	b.n	8004b56 <__swhatbuf_r+0x42>
 8004b38:	466a      	mov	r2, sp
 8004b3a:	f000 fc95 	bl	8005468 <_fstat_r>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	dbf1      	blt.n	8004b26 <__swhatbuf_r+0x12>
 8004b42:	9a01      	ldr	r2, [sp, #4]
 8004b44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b4c:	425a      	negs	r2, r3
 8004b4e:	415a      	adcs	r2, r3
 8004b50:	602a      	str	r2, [r5, #0]
 8004b52:	e7ee      	b.n	8004b32 <__swhatbuf_r+0x1e>
 8004b54:	2340      	movs	r3, #64	; 0x40
 8004b56:	2000      	movs	r0, #0
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	b016      	add	sp, #88	; 0x58
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b60 <__smakebuf_r>:
 8004b60:	898b      	ldrh	r3, [r1, #12]
 8004b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b64:	079d      	lsls	r5, r3, #30
 8004b66:	4606      	mov	r6, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	d507      	bpl.n	8004b7c <__smakebuf_r+0x1c>
 8004b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	2301      	movs	r3, #1
 8004b76:	6163      	str	r3, [r4, #20]
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	ab01      	add	r3, sp, #4
 8004b7e:	466a      	mov	r2, sp
 8004b80:	f7ff ffc8 	bl	8004b14 <__swhatbuf_r>
 8004b84:	9900      	ldr	r1, [sp, #0]
 8004b86:	4605      	mov	r5, r0
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f000 f895 	bl	8004cb8 <_malloc_r>
 8004b8e:	b948      	cbnz	r0, 8004ba4 <__smakebuf_r+0x44>
 8004b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b94:	059a      	lsls	r2, r3, #22
 8004b96:	d4ef      	bmi.n	8004b78 <__smakebuf_r+0x18>
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	e7e3      	b.n	8004b6c <__smakebuf_r+0xc>
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <__smakebuf_r+0x7c>)
 8004ba6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	6020      	str	r0, [r4, #0]
 8004bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	9b00      	ldr	r3, [sp, #0]
 8004bb4:	6163      	str	r3, [r4, #20]
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	6120      	str	r0, [r4, #16]
 8004bba:	b15b      	cbz	r3, 8004bd4 <__smakebuf_r+0x74>
 8004bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 fc63 	bl	800548c <_isatty_r>
 8004bc6:	b128      	cbz	r0, 8004bd4 <__smakebuf_r+0x74>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	89a0      	ldrh	r0, [r4, #12]
 8004bd6:	4305      	orrs	r5, r0
 8004bd8:	81a5      	strh	r5, [r4, #12]
 8004bda:	e7cd      	b.n	8004b78 <__smakebuf_r+0x18>
 8004bdc:	0800496d 	.word	0x0800496d

08004be0 <_free_r>:
 8004be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004be2:	2900      	cmp	r1, #0
 8004be4:	d044      	beq.n	8004c70 <_free_r+0x90>
 8004be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bea:	9001      	str	r0, [sp, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f1a1 0404 	sub.w	r4, r1, #4
 8004bf2:	bfb8      	it	lt
 8004bf4:	18e4      	addlt	r4, r4, r3
 8004bf6:	f000 fc6b 	bl	80054d0 <__malloc_lock>
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <_free_r+0x94>)
 8004bfc:	9801      	ldr	r0, [sp, #4]
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	b933      	cbnz	r3, 8004c10 <_free_r+0x30>
 8004c02:	6063      	str	r3, [r4, #4]
 8004c04:	6014      	str	r4, [r2, #0]
 8004c06:	b003      	add	sp, #12
 8004c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c0c:	f000 bc66 	b.w	80054dc <__malloc_unlock>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d908      	bls.n	8004c26 <_free_r+0x46>
 8004c14:	6825      	ldr	r5, [r4, #0]
 8004c16:	1961      	adds	r1, r4, r5
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	bf01      	itttt	eq
 8004c1c:	6819      	ldreq	r1, [r3, #0]
 8004c1e:	685b      	ldreq	r3, [r3, #4]
 8004c20:	1949      	addeq	r1, r1, r5
 8004c22:	6021      	streq	r1, [r4, #0]
 8004c24:	e7ed      	b.n	8004c02 <_free_r+0x22>
 8004c26:	461a      	mov	r2, r3
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	b10b      	cbz	r3, 8004c30 <_free_r+0x50>
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	d9fa      	bls.n	8004c26 <_free_r+0x46>
 8004c30:	6811      	ldr	r1, [r2, #0]
 8004c32:	1855      	adds	r5, r2, r1
 8004c34:	42a5      	cmp	r5, r4
 8004c36:	d10b      	bne.n	8004c50 <_free_r+0x70>
 8004c38:	6824      	ldr	r4, [r4, #0]
 8004c3a:	4421      	add	r1, r4
 8004c3c:	1854      	adds	r4, r2, r1
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	d1e0      	bne.n	8004c06 <_free_r+0x26>
 8004c44:	681c      	ldr	r4, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	6053      	str	r3, [r2, #4]
 8004c4a:	4421      	add	r1, r4
 8004c4c:	6011      	str	r1, [r2, #0]
 8004c4e:	e7da      	b.n	8004c06 <_free_r+0x26>
 8004c50:	d902      	bls.n	8004c58 <_free_r+0x78>
 8004c52:	230c      	movs	r3, #12
 8004c54:	6003      	str	r3, [r0, #0]
 8004c56:	e7d6      	b.n	8004c06 <_free_r+0x26>
 8004c58:	6825      	ldr	r5, [r4, #0]
 8004c5a:	1961      	adds	r1, r4, r5
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	bf04      	itt	eq
 8004c60:	6819      	ldreq	r1, [r3, #0]
 8004c62:	685b      	ldreq	r3, [r3, #4]
 8004c64:	6063      	str	r3, [r4, #4]
 8004c66:	bf04      	itt	eq
 8004c68:	1949      	addeq	r1, r1, r5
 8004c6a:	6021      	streq	r1, [r4, #0]
 8004c6c:	6054      	str	r4, [r2, #4]
 8004c6e:	e7ca      	b.n	8004c06 <_free_r+0x26>
 8004c70:	b003      	add	sp, #12
 8004c72:	bd30      	pop	{r4, r5, pc}
 8004c74:	2000022c 	.word	0x2000022c

08004c78 <sbrk_aligned>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	4e0e      	ldr	r6, [pc, #56]	; (8004cb4 <sbrk_aligned+0x3c>)
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	6831      	ldr	r1, [r6, #0]
 8004c80:	4605      	mov	r5, r0
 8004c82:	b911      	cbnz	r1, 8004c8a <sbrk_aligned+0x12>
 8004c84:	f000 fb7a 	bl	800537c <_sbrk_r>
 8004c88:	6030      	str	r0, [r6, #0]
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 fb75 	bl	800537c <_sbrk_r>
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	d00a      	beq.n	8004cac <sbrk_aligned+0x34>
 8004c96:	1cc4      	adds	r4, r0, #3
 8004c98:	f024 0403 	bic.w	r4, r4, #3
 8004c9c:	42a0      	cmp	r0, r4
 8004c9e:	d007      	beq.n	8004cb0 <sbrk_aligned+0x38>
 8004ca0:	1a21      	subs	r1, r4, r0
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f000 fb6a 	bl	800537c <_sbrk_r>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d101      	bne.n	8004cb0 <sbrk_aligned+0x38>
 8004cac:	f04f 34ff 	mov.w	r4, #4294967295
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	20000230 	.word	0x20000230

08004cb8 <_malloc_r>:
 8004cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbc:	1ccd      	adds	r5, r1, #3
 8004cbe:	f025 0503 	bic.w	r5, r5, #3
 8004cc2:	3508      	adds	r5, #8
 8004cc4:	2d0c      	cmp	r5, #12
 8004cc6:	bf38      	it	cc
 8004cc8:	250c      	movcc	r5, #12
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	4607      	mov	r7, r0
 8004cce:	db01      	blt.n	8004cd4 <_malloc_r+0x1c>
 8004cd0:	42a9      	cmp	r1, r5
 8004cd2:	d905      	bls.n	8004ce0 <_malloc_r+0x28>
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	2600      	movs	r6, #0
 8004cda:	4630      	mov	r0, r6
 8004cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce0:	4e2e      	ldr	r6, [pc, #184]	; (8004d9c <_malloc_r+0xe4>)
 8004ce2:	f000 fbf5 	bl	80054d0 <__malloc_lock>
 8004ce6:	6833      	ldr	r3, [r6, #0]
 8004ce8:	461c      	mov	r4, r3
 8004cea:	bb34      	cbnz	r4, 8004d3a <_malloc_r+0x82>
 8004cec:	4629      	mov	r1, r5
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f7ff ffc2 	bl	8004c78 <sbrk_aligned>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	d14d      	bne.n	8004d96 <_malloc_r+0xde>
 8004cfa:	6834      	ldr	r4, [r6, #0]
 8004cfc:	4626      	mov	r6, r4
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	d140      	bne.n	8004d84 <_malloc_r+0xcc>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	4631      	mov	r1, r6
 8004d06:	4638      	mov	r0, r7
 8004d08:	eb04 0803 	add.w	r8, r4, r3
 8004d0c:	f000 fb36 	bl	800537c <_sbrk_r>
 8004d10:	4580      	cmp	r8, r0
 8004d12:	d13a      	bne.n	8004d8a <_malloc_r+0xd2>
 8004d14:	6821      	ldr	r1, [r4, #0]
 8004d16:	3503      	adds	r5, #3
 8004d18:	1a6d      	subs	r5, r5, r1
 8004d1a:	f025 0503 	bic.w	r5, r5, #3
 8004d1e:	3508      	adds	r5, #8
 8004d20:	2d0c      	cmp	r5, #12
 8004d22:	bf38      	it	cc
 8004d24:	250c      	movcc	r5, #12
 8004d26:	4629      	mov	r1, r5
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7ff ffa5 	bl	8004c78 <sbrk_aligned>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d02b      	beq.n	8004d8a <_malloc_r+0xd2>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	442b      	add	r3, r5
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	e00e      	b.n	8004d58 <_malloc_r+0xa0>
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	1b52      	subs	r2, r2, r5
 8004d3e:	d41e      	bmi.n	8004d7e <_malloc_r+0xc6>
 8004d40:	2a0b      	cmp	r2, #11
 8004d42:	d916      	bls.n	8004d72 <_malloc_r+0xba>
 8004d44:	1961      	adds	r1, r4, r5
 8004d46:	42a3      	cmp	r3, r4
 8004d48:	6025      	str	r5, [r4, #0]
 8004d4a:	bf18      	it	ne
 8004d4c:	6059      	strne	r1, [r3, #4]
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	bf08      	it	eq
 8004d52:	6031      	streq	r1, [r6, #0]
 8004d54:	5162      	str	r2, [r4, r5]
 8004d56:	604b      	str	r3, [r1, #4]
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f104 060b 	add.w	r6, r4, #11
 8004d5e:	f000 fbbd 	bl	80054dc <__malloc_unlock>
 8004d62:	f026 0607 	bic.w	r6, r6, #7
 8004d66:	1d23      	adds	r3, r4, #4
 8004d68:	1af2      	subs	r2, r6, r3
 8004d6a:	d0b6      	beq.n	8004cda <_malloc_r+0x22>
 8004d6c:	1b9b      	subs	r3, r3, r6
 8004d6e:	50a3      	str	r3, [r4, r2]
 8004d70:	e7b3      	b.n	8004cda <_malloc_r+0x22>
 8004d72:	6862      	ldr	r2, [r4, #4]
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	bf0c      	ite	eq
 8004d78:	6032      	streq	r2, [r6, #0]
 8004d7a:	605a      	strne	r2, [r3, #4]
 8004d7c:	e7ec      	b.n	8004d58 <_malloc_r+0xa0>
 8004d7e:	4623      	mov	r3, r4
 8004d80:	6864      	ldr	r4, [r4, #4]
 8004d82:	e7b2      	b.n	8004cea <_malloc_r+0x32>
 8004d84:	4634      	mov	r4, r6
 8004d86:	6876      	ldr	r6, [r6, #4]
 8004d88:	e7b9      	b.n	8004cfe <_malloc_r+0x46>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4638      	mov	r0, r7
 8004d90:	f000 fba4 	bl	80054dc <__malloc_unlock>
 8004d94:	e7a1      	b.n	8004cda <_malloc_r+0x22>
 8004d96:	6025      	str	r5, [r4, #0]
 8004d98:	e7de      	b.n	8004d58 <_malloc_r+0xa0>
 8004d9a:	bf00      	nop
 8004d9c:	2000022c 	.word	0x2000022c

08004da0 <__sfputc_r>:
 8004da0:	6893      	ldr	r3, [r2, #8]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	b410      	push	{r4}
 8004da8:	6093      	str	r3, [r2, #8]
 8004daa:	da08      	bge.n	8004dbe <__sfputc_r+0x1e>
 8004dac:	6994      	ldr	r4, [r2, #24]
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	db01      	blt.n	8004db6 <__sfputc_r+0x16>
 8004db2:	290a      	cmp	r1, #10
 8004db4:	d103      	bne.n	8004dbe <__sfputc_r+0x1e>
 8004db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dba:	f7ff bc31 	b.w	8004620 <__swbuf_r>
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	1c58      	adds	r0, r3, #1
 8004dc2:	6010      	str	r0, [r2, #0]
 8004dc4:	7019      	strb	r1, [r3, #0]
 8004dc6:	4608      	mov	r0, r1
 8004dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <__sfputs_r>:
 8004dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd0:	4606      	mov	r6, r0
 8004dd2:	460f      	mov	r7, r1
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	18d5      	adds	r5, r2, r3
 8004dd8:	42ac      	cmp	r4, r5
 8004dda:	d101      	bne.n	8004de0 <__sfputs_r+0x12>
 8004ddc:	2000      	movs	r0, #0
 8004dde:	e007      	b.n	8004df0 <__sfputs_r+0x22>
 8004de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de4:	463a      	mov	r2, r7
 8004de6:	4630      	mov	r0, r6
 8004de8:	f7ff ffda 	bl	8004da0 <__sfputc_r>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d1f3      	bne.n	8004dd8 <__sfputs_r+0xa>
 8004df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004df4 <_vfiprintf_r>:
 8004df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	460d      	mov	r5, r1
 8004dfa:	b09d      	sub	sp, #116	; 0x74
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	4698      	mov	r8, r3
 8004e00:	4606      	mov	r6, r0
 8004e02:	b118      	cbz	r0, 8004e0c <_vfiprintf_r+0x18>
 8004e04:	6983      	ldr	r3, [r0, #24]
 8004e06:	b90b      	cbnz	r3, 8004e0c <_vfiprintf_r+0x18>
 8004e08:	f7ff fde4 	bl	80049d4 <__sinit>
 8004e0c:	4b89      	ldr	r3, [pc, #548]	; (8005034 <_vfiprintf_r+0x240>)
 8004e0e:	429d      	cmp	r5, r3
 8004e10:	d11b      	bne.n	8004e4a <_vfiprintf_r+0x56>
 8004e12:	6875      	ldr	r5, [r6, #4]
 8004e14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e16:	07d9      	lsls	r1, r3, #31
 8004e18:	d405      	bmi.n	8004e26 <_vfiprintf_r+0x32>
 8004e1a:	89ab      	ldrh	r3, [r5, #12]
 8004e1c:	059a      	lsls	r2, r3, #22
 8004e1e:	d402      	bmi.n	8004e26 <_vfiprintf_r+0x32>
 8004e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e22:	f7ff fe75 	bl	8004b10 <__retarget_lock_acquire_recursive>
 8004e26:	89ab      	ldrh	r3, [r5, #12]
 8004e28:	071b      	lsls	r3, r3, #28
 8004e2a:	d501      	bpl.n	8004e30 <_vfiprintf_r+0x3c>
 8004e2c:	692b      	ldr	r3, [r5, #16]
 8004e2e:	b9eb      	cbnz	r3, 8004e6c <_vfiprintf_r+0x78>
 8004e30:	4629      	mov	r1, r5
 8004e32:	4630      	mov	r0, r6
 8004e34:	f7ff fc46 	bl	80046c4 <__swsetup_r>
 8004e38:	b1c0      	cbz	r0, 8004e6c <_vfiprintf_r+0x78>
 8004e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e3c:	07dc      	lsls	r4, r3, #31
 8004e3e:	d50e      	bpl.n	8004e5e <_vfiprintf_r+0x6a>
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	b01d      	add	sp, #116	; 0x74
 8004e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4a:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <_vfiprintf_r+0x244>)
 8004e4c:	429d      	cmp	r5, r3
 8004e4e:	d101      	bne.n	8004e54 <_vfiprintf_r+0x60>
 8004e50:	68b5      	ldr	r5, [r6, #8]
 8004e52:	e7df      	b.n	8004e14 <_vfiprintf_r+0x20>
 8004e54:	4b79      	ldr	r3, [pc, #484]	; (800503c <_vfiprintf_r+0x248>)
 8004e56:	429d      	cmp	r5, r3
 8004e58:	bf08      	it	eq
 8004e5a:	68f5      	ldreq	r5, [r6, #12]
 8004e5c:	e7da      	b.n	8004e14 <_vfiprintf_r+0x20>
 8004e5e:	89ab      	ldrh	r3, [r5, #12]
 8004e60:	0598      	lsls	r0, r3, #22
 8004e62:	d4ed      	bmi.n	8004e40 <_vfiprintf_r+0x4c>
 8004e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e66:	f7ff fe54 	bl	8004b12 <__retarget_lock_release_recursive>
 8004e6a:	e7e9      	b.n	8004e40 <_vfiprintf_r+0x4c>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e70:	2320      	movs	r3, #32
 8004e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e7a:	2330      	movs	r3, #48	; 0x30
 8004e7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005040 <_vfiprintf_r+0x24c>
 8004e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e84:	f04f 0901 	mov.w	r9, #1
 8004e88:	4623      	mov	r3, r4
 8004e8a:	469a      	mov	sl, r3
 8004e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e90:	b10a      	cbz	r2, 8004e96 <_vfiprintf_r+0xa2>
 8004e92:	2a25      	cmp	r2, #37	; 0x25
 8004e94:	d1f9      	bne.n	8004e8a <_vfiprintf_r+0x96>
 8004e96:	ebba 0b04 	subs.w	fp, sl, r4
 8004e9a:	d00b      	beq.n	8004eb4 <_vfiprintf_r+0xc0>
 8004e9c:	465b      	mov	r3, fp
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff ff93 	bl	8004dce <__sfputs_r>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f000 80aa 	beq.w	8005002 <_vfiprintf_r+0x20e>
 8004eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eb0:	445a      	add	r2, fp
 8004eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8004eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80a2 	beq.w	8005002 <_vfiprintf_r+0x20e>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ec8:	f10a 0a01 	add.w	sl, sl, #1
 8004ecc:	9304      	str	r3, [sp, #16]
 8004ece:	9307      	str	r3, [sp, #28]
 8004ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ed6:	4654      	mov	r4, sl
 8004ed8:	2205      	movs	r2, #5
 8004eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ede:	4858      	ldr	r0, [pc, #352]	; (8005040 <_vfiprintf_r+0x24c>)
 8004ee0:	f7fb f996 	bl	8000210 <memchr>
 8004ee4:	9a04      	ldr	r2, [sp, #16]
 8004ee6:	b9d8      	cbnz	r0, 8004f20 <_vfiprintf_r+0x12c>
 8004ee8:	06d1      	lsls	r1, r2, #27
 8004eea:	bf44      	itt	mi
 8004eec:	2320      	movmi	r3, #32
 8004eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ef2:	0713      	lsls	r3, r2, #28
 8004ef4:	bf44      	itt	mi
 8004ef6:	232b      	movmi	r3, #43	; 0x2b
 8004ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004efc:	f89a 3000 	ldrb.w	r3, [sl]
 8004f00:	2b2a      	cmp	r3, #42	; 0x2a
 8004f02:	d015      	beq.n	8004f30 <_vfiprintf_r+0x13c>
 8004f04:	9a07      	ldr	r2, [sp, #28]
 8004f06:	4654      	mov	r4, sl
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f04f 0c0a 	mov.w	ip, #10
 8004f0e:	4621      	mov	r1, r4
 8004f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f14:	3b30      	subs	r3, #48	; 0x30
 8004f16:	2b09      	cmp	r3, #9
 8004f18:	d94e      	bls.n	8004fb8 <_vfiprintf_r+0x1c4>
 8004f1a:	b1b0      	cbz	r0, 8004f4a <_vfiprintf_r+0x156>
 8004f1c:	9207      	str	r2, [sp, #28]
 8004f1e:	e014      	b.n	8004f4a <_vfiprintf_r+0x156>
 8004f20:	eba0 0308 	sub.w	r3, r0, r8
 8004f24:	fa09 f303 	lsl.w	r3, r9, r3
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	46a2      	mov	sl, r4
 8004f2e:	e7d2      	b.n	8004ed6 <_vfiprintf_r+0xe2>
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	1d19      	adds	r1, r3, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	9103      	str	r1, [sp, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bfbb      	ittet	lt
 8004f3c:	425b      	neglt	r3, r3
 8004f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8004f42:	9307      	strge	r3, [sp, #28]
 8004f44:	9307      	strlt	r3, [sp, #28]
 8004f46:	bfb8      	it	lt
 8004f48:	9204      	strlt	r2, [sp, #16]
 8004f4a:	7823      	ldrb	r3, [r4, #0]
 8004f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f4e:	d10c      	bne.n	8004f6a <_vfiprintf_r+0x176>
 8004f50:	7863      	ldrb	r3, [r4, #1]
 8004f52:	2b2a      	cmp	r3, #42	; 0x2a
 8004f54:	d135      	bne.n	8004fc2 <_vfiprintf_r+0x1ce>
 8004f56:	9b03      	ldr	r3, [sp, #12]
 8004f58:	1d1a      	adds	r2, r3, #4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	9203      	str	r2, [sp, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bfb8      	it	lt
 8004f62:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f66:	3402      	adds	r4, #2
 8004f68:	9305      	str	r3, [sp, #20]
 8004f6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005050 <_vfiprintf_r+0x25c>
 8004f6e:	7821      	ldrb	r1, [r4, #0]
 8004f70:	2203      	movs	r2, #3
 8004f72:	4650      	mov	r0, sl
 8004f74:	f7fb f94c 	bl	8000210 <memchr>
 8004f78:	b140      	cbz	r0, 8004f8c <_vfiprintf_r+0x198>
 8004f7a:	2340      	movs	r3, #64	; 0x40
 8004f7c:	eba0 000a 	sub.w	r0, r0, sl
 8004f80:	fa03 f000 	lsl.w	r0, r3, r0
 8004f84:	9b04      	ldr	r3, [sp, #16]
 8004f86:	4303      	orrs	r3, r0
 8004f88:	3401      	adds	r4, #1
 8004f8a:	9304      	str	r3, [sp, #16]
 8004f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f90:	482c      	ldr	r0, [pc, #176]	; (8005044 <_vfiprintf_r+0x250>)
 8004f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f96:	2206      	movs	r2, #6
 8004f98:	f7fb f93a 	bl	8000210 <memchr>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d03f      	beq.n	8005020 <_vfiprintf_r+0x22c>
 8004fa0:	4b29      	ldr	r3, [pc, #164]	; (8005048 <_vfiprintf_r+0x254>)
 8004fa2:	bb1b      	cbnz	r3, 8004fec <_vfiprintf_r+0x1f8>
 8004fa4:	9b03      	ldr	r3, [sp, #12]
 8004fa6:	3307      	adds	r3, #7
 8004fa8:	f023 0307 	bic.w	r3, r3, #7
 8004fac:	3308      	adds	r3, #8
 8004fae:	9303      	str	r3, [sp, #12]
 8004fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb2:	443b      	add	r3, r7
 8004fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb6:	e767      	b.n	8004e88 <_vfiprintf_r+0x94>
 8004fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	e7a5      	b.n	8004f0e <_vfiprintf_r+0x11a>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	3401      	adds	r4, #1
 8004fc6:	9305      	str	r3, [sp, #20]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f04f 0c0a 	mov.w	ip, #10
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fd4:	3a30      	subs	r2, #48	; 0x30
 8004fd6:	2a09      	cmp	r2, #9
 8004fd8:	d903      	bls.n	8004fe2 <_vfiprintf_r+0x1ee>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0c5      	beq.n	8004f6a <_vfiprintf_r+0x176>
 8004fde:	9105      	str	r1, [sp, #20]
 8004fe0:	e7c3      	b.n	8004f6a <_vfiprintf_r+0x176>
 8004fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e7f0      	b.n	8004fce <_vfiprintf_r+0x1da>
 8004fec:	ab03      	add	r3, sp, #12
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <_vfiprintf_r+0x258>)
 8004ff4:	a904      	add	r1, sp, #16
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f3af 8000 	nop.w
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	1c78      	adds	r0, r7, #1
 8005000:	d1d6      	bne.n	8004fb0 <_vfiprintf_r+0x1bc>
 8005002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005004:	07d9      	lsls	r1, r3, #31
 8005006:	d405      	bmi.n	8005014 <_vfiprintf_r+0x220>
 8005008:	89ab      	ldrh	r3, [r5, #12]
 800500a:	059a      	lsls	r2, r3, #22
 800500c:	d402      	bmi.n	8005014 <_vfiprintf_r+0x220>
 800500e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005010:	f7ff fd7f 	bl	8004b12 <__retarget_lock_release_recursive>
 8005014:	89ab      	ldrh	r3, [r5, #12]
 8005016:	065b      	lsls	r3, r3, #25
 8005018:	f53f af12 	bmi.w	8004e40 <_vfiprintf_r+0x4c>
 800501c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800501e:	e711      	b.n	8004e44 <_vfiprintf_r+0x50>
 8005020:	ab03      	add	r3, sp, #12
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	462a      	mov	r2, r5
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <_vfiprintf_r+0x258>)
 8005028:	a904      	add	r1, sp, #16
 800502a:	4630      	mov	r0, r6
 800502c:	f000 f880 	bl	8005130 <_printf_i>
 8005030:	e7e4      	b.n	8004ffc <_vfiprintf_r+0x208>
 8005032:	bf00      	nop
 8005034:	08005614 	.word	0x08005614
 8005038:	08005634 	.word	0x08005634
 800503c:	080055f4 	.word	0x080055f4
 8005040:	08005654 	.word	0x08005654
 8005044:	0800565e 	.word	0x0800565e
 8005048:	00000000 	.word	0x00000000
 800504c:	08004dcf 	.word	0x08004dcf
 8005050:	0800565a 	.word	0x0800565a

08005054 <_printf_common>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	4616      	mov	r6, r2
 800505a:	4699      	mov	r9, r3
 800505c:	688a      	ldr	r2, [r1, #8]
 800505e:	690b      	ldr	r3, [r1, #16]
 8005060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005064:	4293      	cmp	r3, r2
 8005066:	bfb8      	it	lt
 8005068:	4613      	movlt	r3, r2
 800506a:	6033      	str	r3, [r6, #0]
 800506c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005070:	4607      	mov	r7, r0
 8005072:	460c      	mov	r4, r1
 8005074:	b10a      	cbz	r2, 800507a <_printf_common+0x26>
 8005076:	3301      	adds	r3, #1
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	0699      	lsls	r1, r3, #26
 800507e:	bf42      	ittt	mi
 8005080:	6833      	ldrmi	r3, [r6, #0]
 8005082:	3302      	addmi	r3, #2
 8005084:	6033      	strmi	r3, [r6, #0]
 8005086:	6825      	ldr	r5, [r4, #0]
 8005088:	f015 0506 	ands.w	r5, r5, #6
 800508c:	d106      	bne.n	800509c <_printf_common+0x48>
 800508e:	f104 0a19 	add.w	sl, r4, #25
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	6832      	ldr	r2, [r6, #0]
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	42ab      	cmp	r3, r5
 800509a:	dc26      	bgt.n	80050ea <_printf_common+0x96>
 800509c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050a0:	1e13      	subs	r3, r2, #0
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	bf18      	it	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	0692      	lsls	r2, r2, #26
 80050aa:	d42b      	bmi.n	8005104 <_printf_common+0xb0>
 80050ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b0:	4649      	mov	r1, r9
 80050b2:	4638      	mov	r0, r7
 80050b4:	47c0      	blx	r8
 80050b6:	3001      	adds	r0, #1
 80050b8:	d01e      	beq.n	80050f8 <_printf_common+0xa4>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	68e5      	ldr	r5, [r4, #12]
 80050be:	6832      	ldr	r2, [r6, #0]
 80050c0:	f003 0306 	and.w	r3, r3, #6
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	bf08      	it	eq
 80050c8:	1aad      	subeq	r5, r5, r2
 80050ca:	68a3      	ldr	r3, [r4, #8]
 80050cc:	6922      	ldr	r2, [r4, #16]
 80050ce:	bf0c      	ite	eq
 80050d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d4:	2500      	movne	r5, #0
 80050d6:	4293      	cmp	r3, r2
 80050d8:	bfc4      	itt	gt
 80050da:	1a9b      	subgt	r3, r3, r2
 80050dc:	18ed      	addgt	r5, r5, r3
 80050de:	2600      	movs	r6, #0
 80050e0:	341a      	adds	r4, #26
 80050e2:	42b5      	cmp	r5, r6
 80050e4:	d11a      	bne.n	800511c <_printf_common+0xc8>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e008      	b.n	80050fc <_printf_common+0xa8>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4652      	mov	r2, sl
 80050ee:	4649      	mov	r1, r9
 80050f0:	4638      	mov	r0, r7
 80050f2:	47c0      	blx	r8
 80050f4:	3001      	adds	r0, #1
 80050f6:	d103      	bne.n	8005100 <_printf_common+0xac>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005100:	3501      	adds	r5, #1
 8005102:	e7c6      	b.n	8005092 <_printf_common+0x3e>
 8005104:	18e1      	adds	r1, r4, r3
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	2030      	movs	r0, #48	; 0x30
 800510a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800510e:	4422      	add	r2, r4
 8005110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005118:	3302      	adds	r3, #2
 800511a:	e7c7      	b.n	80050ac <_printf_common+0x58>
 800511c:	2301      	movs	r3, #1
 800511e:	4622      	mov	r2, r4
 8005120:	4649      	mov	r1, r9
 8005122:	4638      	mov	r0, r7
 8005124:	47c0      	blx	r8
 8005126:	3001      	adds	r0, #1
 8005128:	d0e6      	beq.n	80050f8 <_printf_common+0xa4>
 800512a:	3601      	adds	r6, #1
 800512c:	e7d9      	b.n	80050e2 <_printf_common+0x8e>
	...

08005130 <_printf_i>:
 8005130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	7e0f      	ldrb	r7, [r1, #24]
 8005136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005138:	2f78      	cmp	r7, #120	; 0x78
 800513a:	4691      	mov	r9, r2
 800513c:	4680      	mov	r8, r0
 800513e:	460c      	mov	r4, r1
 8005140:	469a      	mov	sl, r3
 8005142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005146:	d807      	bhi.n	8005158 <_printf_i+0x28>
 8005148:	2f62      	cmp	r7, #98	; 0x62
 800514a:	d80a      	bhi.n	8005162 <_printf_i+0x32>
 800514c:	2f00      	cmp	r7, #0
 800514e:	f000 80d8 	beq.w	8005302 <_printf_i+0x1d2>
 8005152:	2f58      	cmp	r7, #88	; 0x58
 8005154:	f000 80a3 	beq.w	800529e <_printf_i+0x16e>
 8005158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800515c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005160:	e03a      	b.n	80051d8 <_printf_i+0xa8>
 8005162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005166:	2b15      	cmp	r3, #21
 8005168:	d8f6      	bhi.n	8005158 <_printf_i+0x28>
 800516a:	a101      	add	r1, pc, #4	; (adr r1, 8005170 <_printf_i+0x40>)
 800516c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005170:	080051c9 	.word	0x080051c9
 8005174:	080051dd 	.word	0x080051dd
 8005178:	08005159 	.word	0x08005159
 800517c:	08005159 	.word	0x08005159
 8005180:	08005159 	.word	0x08005159
 8005184:	08005159 	.word	0x08005159
 8005188:	080051dd 	.word	0x080051dd
 800518c:	08005159 	.word	0x08005159
 8005190:	08005159 	.word	0x08005159
 8005194:	08005159 	.word	0x08005159
 8005198:	08005159 	.word	0x08005159
 800519c:	080052e9 	.word	0x080052e9
 80051a0:	0800520d 	.word	0x0800520d
 80051a4:	080052cb 	.word	0x080052cb
 80051a8:	08005159 	.word	0x08005159
 80051ac:	08005159 	.word	0x08005159
 80051b0:	0800530b 	.word	0x0800530b
 80051b4:	08005159 	.word	0x08005159
 80051b8:	0800520d 	.word	0x0800520d
 80051bc:	08005159 	.word	0x08005159
 80051c0:	08005159 	.word	0x08005159
 80051c4:	080052d3 	.word	0x080052d3
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	602a      	str	r2, [r5, #0]
 80051d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051d8:	2301      	movs	r3, #1
 80051da:	e0a3      	b.n	8005324 <_printf_i+0x1f4>
 80051dc:	6820      	ldr	r0, [r4, #0]
 80051de:	6829      	ldr	r1, [r5, #0]
 80051e0:	0606      	lsls	r6, r0, #24
 80051e2:	f101 0304 	add.w	r3, r1, #4
 80051e6:	d50a      	bpl.n	80051fe <_printf_i+0xce>
 80051e8:	680e      	ldr	r6, [r1, #0]
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	2e00      	cmp	r6, #0
 80051ee:	da03      	bge.n	80051f8 <_printf_i+0xc8>
 80051f0:	232d      	movs	r3, #45	; 0x2d
 80051f2:	4276      	negs	r6, r6
 80051f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f8:	485e      	ldr	r0, [pc, #376]	; (8005374 <_printf_i+0x244>)
 80051fa:	230a      	movs	r3, #10
 80051fc:	e019      	b.n	8005232 <_printf_i+0x102>
 80051fe:	680e      	ldr	r6, [r1, #0]
 8005200:	602b      	str	r3, [r5, #0]
 8005202:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005206:	bf18      	it	ne
 8005208:	b236      	sxthne	r6, r6
 800520a:	e7ef      	b.n	80051ec <_printf_i+0xbc>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	6820      	ldr	r0, [r4, #0]
 8005210:	1d19      	adds	r1, r3, #4
 8005212:	6029      	str	r1, [r5, #0]
 8005214:	0601      	lsls	r1, r0, #24
 8005216:	d501      	bpl.n	800521c <_printf_i+0xec>
 8005218:	681e      	ldr	r6, [r3, #0]
 800521a:	e002      	b.n	8005222 <_printf_i+0xf2>
 800521c:	0646      	lsls	r6, r0, #25
 800521e:	d5fb      	bpl.n	8005218 <_printf_i+0xe8>
 8005220:	881e      	ldrh	r6, [r3, #0]
 8005222:	4854      	ldr	r0, [pc, #336]	; (8005374 <_printf_i+0x244>)
 8005224:	2f6f      	cmp	r7, #111	; 0x6f
 8005226:	bf0c      	ite	eq
 8005228:	2308      	moveq	r3, #8
 800522a:	230a      	movne	r3, #10
 800522c:	2100      	movs	r1, #0
 800522e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005232:	6865      	ldr	r5, [r4, #4]
 8005234:	60a5      	str	r5, [r4, #8]
 8005236:	2d00      	cmp	r5, #0
 8005238:	bfa2      	ittt	ge
 800523a:	6821      	ldrge	r1, [r4, #0]
 800523c:	f021 0104 	bicge.w	r1, r1, #4
 8005240:	6021      	strge	r1, [r4, #0]
 8005242:	b90e      	cbnz	r6, 8005248 <_printf_i+0x118>
 8005244:	2d00      	cmp	r5, #0
 8005246:	d04d      	beq.n	80052e4 <_printf_i+0x1b4>
 8005248:	4615      	mov	r5, r2
 800524a:	fbb6 f1f3 	udiv	r1, r6, r3
 800524e:	fb03 6711 	mls	r7, r3, r1, r6
 8005252:	5dc7      	ldrb	r7, [r0, r7]
 8005254:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005258:	4637      	mov	r7, r6
 800525a:	42bb      	cmp	r3, r7
 800525c:	460e      	mov	r6, r1
 800525e:	d9f4      	bls.n	800524a <_printf_i+0x11a>
 8005260:	2b08      	cmp	r3, #8
 8005262:	d10b      	bne.n	800527c <_printf_i+0x14c>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	07de      	lsls	r6, r3, #31
 8005268:	d508      	bpl.n	800527c <_printf_i+0x14c>
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	6861      	ldr	r1, [r4, #4]
 800526e:	4299      	cmp	r1, r3
 8005270:	bfde      	ittt	le
 8005272:	2330      	movle	r3, #48	; 0x30
 8005274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005278:	f105 35ff 	addle.w	r5, r5, #4294967295
 800527c:	1b52      	subs	r2, r2, r5
 800527e:	6122      	str	r2, [r4, #16]
 8005280:	f8cd a000 	str.w	sl, [sp]
 8005284:	464b      	mov	r3, r9
 8005286:	aa03      	add	r2, sp, #12
 8005288:	4621      	mov	r1, r4
 800528a:	4640      	mov	r0, r8
 800528c:	f7ff fee2 	bl	8005054 <_printf_common>
 8005290:	3001      	adds	r0, #1
 8005292:	d14c      	bne.n	800532e <_printf_i+0x1fe>
 8005294:	f04f 30ff 	mov.w	r0, #4294967295
 8005298:	b004      	add	sp, #16
 800529a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529e:	4835      	ldr	r0, [pc, #212]	; (8005374 <_printf_i+0x244>)
 80052a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052a4:	6829      	ldr	r1, [r5, #0]
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80052ac:	6029      	str	r1, [r5, #0]
 80052ae:	061d      	lsls	r5, r3, #24
 80052b0:	d514      	bpl.n	80052dc <_printf_i+0x1ac>
 80052b2:	07df      	lsls	r7, r3, #31
 80052b4:	bf44      	itt	mi
 80052b6:	f043 0320 	orrmi.w	r3, r3, #32
 80052ba:	6023      	strmi	r3, [r4, #0]
 80052bc:	b91e      	cbnz	r6, 80052c6 <_printf_i+0x196>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	f023 0320 	bic.w	r3, r3, #32
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	2310      	movs	r3, #16
 80052c8:	e7b0      	b.n	800522c <_printf_i+0xfc>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	f043 0320 	orr.w	r3, r3, #32
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	2378      	movs	r3, #120	; 0x78
 80052d4:	4828      	ldr	r0, [pc, #160]	; (8005378 <_printf_i+0x248>)
 80052d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052da:	e7e3      	b.n	80052a4 <_printf_i+0x174>
 80052dc:	0659      	lsls	r1, r3, #25
 80052de:	bf48      	it	mi
 80052e0:	b2b6      	uxthmi	r6, r6
 80052e2:	e7e6      	b.n	80052b2 <_printf_i+0x182>
 80052e4:	4615      	mov	r5, r2
 80052e6:	e7bb      	b.n	8005260 <_printf_i+0x130>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	6826      	ldr	r6, [r4, #0]
 80052ec:	6961      	ldr	r1, [r4, #20]
 80052ee:	1d18      	adds	r0, r3, #4
 80052f0:	6028      	str	r0, [r5, #0]
 80052f2:	0635      	lsls	r5, r6, #24
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	d501      	bpl.n	80052fc <_printf_i+0x1cc>
 80052f8:	6019      	str	r1, [r3, #0]
 80052fa:	e002      	b.n	8005302 <_printf_i+0x1d2>
 80052fc:	0670      	lsls	r0, r6, #25
 80052fe:	d5fb      	bpl.n	80052f8 <_printf_i+0x1c8>
 8005300:	8019      	strh	r1, [r3, #0]
 8005302:	2300      	movs	r3, #0
 8005304:	6123      	str	r3, [r4, #16]
 8005306:	4615      	mov	r5, r2
 8005308:	e7ba      	b.n	8005280 <_printf_i+0x150>
 800530a:	682b      	ldr	r3, [r5, #0]
 800530c:	1d1a      	adds	r2, r3, #4
 800530e:	602a      	str	r2, [r5, #0]
 8005310:	681d      	ldr	r5, [r3, #0]
 8005312:	6862      	ldr	r2, [r4, #4]
 8005314:	2100      	movs	r1, #0
 8005316:	4628      	mov	r0, r5
 8005318:	f7fa ff7a 	bl	8000210 <memchr>
 800531c:	b108      	cbz	r0, 8005322 <_printf_i+0x1f2>
 800531e:	1b40      	subs	r0, r0, r5
 8005320:	6060      	str	r0, [r4, #4]
 8005322:	6863      	ldr	r3, [r4, #4]
 8005324:	6123      	str	r3, [r4, #16]
 8005326:	2300      	movs	r3, #0
 8005328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800532c:	e7a8      	b.n	8005280 <_printf_i+0x150>
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	462a      	mov	r2, r5
 8005332:	4649      	mov	r1, r9
 8005334:	4640      	mov	r0, r8
 8005336:	47d0      	blx	sl
 8005338:	3001      	adds	r0, #1
 800533a:	d0ab      	beq.n	8005294 <_printf_i+0x164>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	079b      	lsls	r3, r3, #30
 8005340:	d413      	bmi.n	800536a <_printf_i+0x23a>
 8005342:	68e0      	ldr	r0, [r4, #12]
 8005344:	9b03      	ldr	r3, [sp, #12]
 8005346:	4298      	cmp	r0, r3
 8005348:	bfb8      	it	lt
 800534a:	4618      	movlt	r0, r3
 800534c:	e7a4      	b.n	8005298 <_printf_i+0x168>
 800534e:	2301      	movs	r3, #1
 8005350:	4632      	mov	r2, r6
 8005352:	4649      	mov	r1, r9
 8005354:	4640      	mov	r0, r8
 8005356:	47d0      	blx	sl
 8005358:	3001      	adds	r0, #1
 800535a:	d09b      	beq.n	8005294 <_printf_i+0x164>
 800535c:	3501      	adds	r5, #1
 800535e:	68e3      	ldr	r3, [r4, #12]
 8005360:	9903      	ldr	r1, [sp, #12]
 8005362:	1a5b      	subs	r3, r3, r1
 8005364:	42ab      	cmp	r3, r5
 8005366:	dcf2      	bgt.n	800534e <_printf_i+0x21e>
 8005368:	e7eb      	b.n	8005342 <_printf_i+0x212>
 800536a:	2500      	movs	r5, #0
 800536c:	f104 0619 	add.w	r6, r4, #25
 8005370:	e7f5      	b.n	800535e <_printf_i+0x22e>
 8005372:	bf00      	nop
 8005374:	08005665 	.word	0x08005665
 8005378:	08005676 	.word	0x08005676

0800537c <_sbrk_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d06      	ldr	r5, [pc, #24]	; (8005398 <_sbrk_r+0x1c>)
 8005380:	2300      	movs	r3, #0
 8005382:	4604      	mov	r4, r0
 8005384:	4608      	mov	r0, r1
 8005386:	602b      	str	r3, [r5, #0]
 8005388:	f7fb fece 	bl	8001128 <_sbrk>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d102      	bne.n	8005396 <_sbrk_r+0x1a>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	b103      	cbz	r3, 8005396 <_sbrk_r+0x1a>
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	20000234 	.word	0x20000234

0800539c <__sread>:
 800539c:	b510      	push	{r4, lr}
 800539e:	460c      	mov	r4, r1
 80053a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a4:	f000 f8a0 	bl	80054e8 <_read_r>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	bfab      	itete	ge
 80053ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053ae:	89a3      	ldrhlt	r3, [r4, #12]
 80053b0:	181b      	addge	r3, r3, r0
 80053b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053b6:	bfac      	ite	ge
 80053b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80053ba:	81a3      	strhlt	r3, [r4, #12]
 80053bc:	bd10      	pop	{r4, pc}

080053be <__swrite>:
 80053be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c2:	461f      	mov	r7, r3
 80053c4:	898b      	ldrh	r3, [r1, #12]
 80053c6:	05db      	lsls	r3, r3, #23
 80053c8:	4605      	mov	r5, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	4616      	mov	r6, r2
 80053ce:	d505      	bpl.n	80053dc <__swrite+0x1e>
 80053d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d4:	2302      	movs	r3, #2
 80053d6:	2200      	movs	r2, #0
 80053d8:	f000 f868 	bl	80054ac <_lseek_r>
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e6:	81a3      	strh	r3, [r4, #12]
 80053e8:	4632      	mov	r2, r6
 80053ea:	463b      	mov	r3, r7
 80053ec:	4628      	mov	r0, r5
 80053ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053f2:	f000 b817 	b.w	8005424 <_write_r>

080053f6 <__sseek>:
 80053f6:	b510      	push	{r4, lr}
 80053f8:	460c      	mov	r4, r1
 80053fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fe:	f000 f855 	bl	80054ac <_lseek_r>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	bf15      	itete	ne
 8005408:	6560      	strne	r0, [r4, #84]	; 0x54
 800540a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800540e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005412:	81a3      	strheq	r3, [r4, #12]
 8005414:	bf18      	it	ne
 8005416:	81a3      	strhne	r3, [r4, #12]
 8005418:	bd10      	pop	{r4, pc}

0800541a <__sclose>:
 800541a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541e:	f000 b813 	b.w	8005448 <_close_r>
	...

08005424 <_write_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4d07      	ldr	r5, [pc, #28]	; (8005444 <_write_r+0x20>)
 8005428:	4604      	mov	r4, r0
 800542a:	4608      	mov	r0, r1
 800542c:	4611      	mov	r1, r2
 800542e:	2200      	movs	r2, #0
 8005430:	602a      	str	r2, [r5, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	f7fb fe27 	bl	8001086 <_write>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_write_r+0x1e>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_write_r+0x1e>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	20000234 	.word	0x20000234

08005448 <_close_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4d06      	ldr	r5, [pc, #24]	; (8005464 <_close_r+0x1c>)
 800544c:	2300      	movs	r3, #0
 800544e:	4604      	mov	r4, r0
 8005450:	4608      	mov	r0, r1
 8005452:	602b      	str	r3, [r5, #0]
 8005454:	f7fb fe33 	bl	80010be <_close>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_close_r+0x1a>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_close_r+0x1a>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	20000234 	.word	0x20000234

08005468 <_fstat_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4d07      	ldr	r5, [pc, #28]	; (8005488 <_fstat_r+0x20>)
 800546c:	2300      	movs	r3, #0
 800546e:	4604      	mov	r4, r0
 8005470:	4608      	mov	r0, r1
 8005472:	4611      	mov	r1, r2
 8005474:	602b      	str	r3, [r5, #0]
 8005476:	f7fb fe2e 	bl	80010d6 <_fstat>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	d102      	bne.n	8005484 <_fstat_r+0x1c>
 800547e:	682b      	ldr	r3, [r5, #0]
 8005480:	b103      	cbz	r3, 8005484 <_fstat_r+0x1c>
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	bd38      	pop	{r3, r4, r5, pc}
 8005486:	bf00      	nop
 8005488:	20000234 	.word	0x20000234

0800548c <_isatty_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4d06      	ldr	r5, [pc, #24]	; (80054a8 <_isatty_r+0x1c>)
 8005490:	2300      	movs	r3, #0
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	f7fb fe2d 	bl	80010f6 <_isatty>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_isatty_r+0x1a>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_isatty_r+0x1a>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	20000234 	.word	0x20000234

080054ac <_lseek_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d07      	ldr	r5, [pc, #28]	; (80054cc <_lseek_r+0x20>)
 80054b0:	4604      	mov	r4, r0
 80054b2:	4608      	mov	r0, r1
 80054b4:	4611      	mov	r1, r2
 80054b6:	2200      	movs	r2, #0
 80054b8:	602a      	str	r2, [r5, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f7fb fe26 	bl	800110c <_lseek>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_lseek_r+0x1e>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_lseek_r+0x1e>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	20000234 	.word	0x20000234

080054d0 <__malloc_lock>:
 80054d0:	4801      	ldr	r0, [pc, #4]	; (80054d8 <__malloc_lock+0x8>)
 80054d2:	f7ff bb1d 	b.w	8004b10 <__retarget_lock_acquire_recursive>
 80054d6:	bf00      	nop
 80054d8:	20000228 	.word	0x20000228

080054dc <__malloc_unlock>:
 80054dc:	4801      	ldr	r0, [pc, #4]	; (80054e4 <__malloc_unlock+0x8>)
 80054de:	f7ff bb18 	b.w	8004b12 <__retarget_lock_release_recursive>
 80054e2:	bf00      	nop
 80054e4:	20000228 	.word	0x20000228

080054e8 <_read_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d07      	ldr	r5, [pc, #28]	; (8005508 <_read_r+0x20>)
 80054ec:	4604      	mov	r4, r0
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	602a      	str	r2, [r5, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fb fda8 	bl	800104c <_read>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_read_r+0x1e>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_read_r+0x1e>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	20000234 	.word	0x20000234

0800550c <_init>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr

08005518 <_fini>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	bf00      	nop
 800551c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551e:	bc08      	pop	{r3}
 8005520:	469e      	mov	lr, r3
 8005522:	4770      	bx	lr
